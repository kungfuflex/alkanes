"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.alkanes = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: alkanes.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = __importStar(require("google-protobuf"));
var alkanes;
(function (alkanes) {
    var _uint128_one_of_decls, _AlkaneId_one_of_decls, _AlkaneTransfer_one_of_decls, _MessageContextParcel_one_of_decls, _KeyValuePair_one_of_decls, _ExtendedCallResponse_one_of_decls, _Context_one_of_decls, _TraceContext_one_of_decls, _AlkanesEnterContext_one_of_decls, _AlkanesExitContext_one_of_decls, _AlkanesCreate_one_of_decls, _AlkanesTraceEvent_one_of_decls, _AlkanesTrace_one_of_decls, _SimulateResponse_one_of_decls, _AlkaneInventoryRequest_one_of_decls, _AlkaneInventoryResponse_one_of_decls;
    let AlkanesTraceCallType;
    (function (AlkanesTraceCallType) {
        AlkanesTraceCallType[AlkanesTraceCallType["NONE"] = 0] = "NONE";
        AlkanesTraceCallType[AlkanesTraceCallType["CALL"] = 1] = "CALL";
        AlkanesTraceCallType[AlkanesTraceCallType["DELEGATECALL"] = 2] = "DELEGATECALL";
        AlkanesTraceCallType[AlkanesTraceCallType["STATICCALL"] = 3] = "STATICCALL";
    })(AlkanesTraceCallType = alkanes.AlkanesTraceCallType || (alkanes.AlkanesTraceCallType = {}));
    let AlkanesTraceStatusFlag;
    (function (AlkanesTraceStatusFlag) {
        AlkanesTraceStatusFlag[AlkanesTraceStatusFlag["SUCCESS"] = 0] = "SUCCESS";
        AlkanesTraceStatusFlag[AlkanesTraceStatusFlag["FAILURE"] = 1] = "FAILURE";
    })(AlkanesTraceStatusFlag = alkanes.AlkanesTraceStatusFlag || (alkanes.AlkanesTraceStatusFlag = {}));
    class uint128 extends pb_1.Message {
        constructor(data) {
            super();
            _uint128_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _uint128_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lo" in data && data.lo != undefined) {
                    this.lo = data.lo;
                }
                if ("hi" in data && data.hi != undefined) {
                    this.hi = data.hi;
                }
            }
        }
        get lo() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0");
        }
        set lo(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get hi() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0");
        }
        set hi(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new uint128({});
            if (data.lo != null) {
                message.lo = data.lo;
            }
            if (data.hi != null) {
                message.hi = data.hi;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.lo != null) {
                data.lo = this.lo;
            }
            if (this.hi != null) {
                data.hi = this.hi;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.lo != "0")
                writer.writeUint64String(1, this.lo);
            if (this.hi != "0")
                writer.writeUint64String(2, this.hi);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new uint128();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.lo = reader.readUint64String();
                        break;
                    case 2:
                        message.hi = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return uint128.deserialize(bytes);
        }
    }
    _uint128_one_of_decls = new WeakMap();
    alkanes.uint128 = uint128;
    class AlkaneId extends pb_1.Message {
        constructor(data) {
            super();
            _AlkaneId_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AlkaneId_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("tx" in data && data.tx != undefined) {
                    this.tx = data.tx;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, uint128, 1);
        }
        set block(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tx() {
            return pb_1.Message.getWrapperField(this, uint128, 2);
        }
        set tx(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_tx() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data) {
            const message = new AlkaneId({});
            if (data.block != null) {
                message.block = uint128.fromObject(data.block);
            }
            if (data.tx != null) {
                message.tx = uint128.fromObject(data.tx);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.tx != null) {
                data.tx = this.tx.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (this.has_tx)
                writer.writeMessage(2, this.tx, () => this.tx.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkaneId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = uint128.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.tx, () => message.tx = uint128.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkaneId.deserialize(bytes);
        }
    }
    _AlkaneId_one_of_decls = new WeakMap();
    alkanes.AlkaneId = AlkaneId;
    class AlkaneTransfer extends pb_1.Message {
        constructor(data) {
            super();
            _AlkaneTransfer_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AlkaneTransfer_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get id() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 1);
        }
        set id(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value() {
            return pb_1.Message.getWrapperField(this, uint128, 2);
        }
        set value(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data) {
            const message = new AlkaneTransfer({});
            if (data.id != null) {
                message.id = AlkaneId.fromObject(data.id);
            }
            if (data.value != null) {
                message.value = uint128.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.id != null) {
                data.id = this.id.toObject();
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id)
                writer.writeMessage(1, this.id, () => this.id.serialize(writer));
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkaneTransfer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.id, () => message.id = AlkaneId.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = uint128.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkaneTransfer.deserialize(bytes);
        }
    }
    _AlkaneTransfer_one_of_decls = new WeakMap();
    alkanes.AlkaneTransfer = AlkaneTransfer;
    class MessageContextParcel extends pb_1.Message {
        constructor(data) {
            super();
            _MessageContextParcel_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _MessageContextParcel_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alkanes" in data && data.alkanes != undefined) {
                    this.alkanes = data.alkanes;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("txindex" in data && data.txindex != undefined) {
                    this.txindex = data.txindex;
                }
                if ("calldata" in data && data.calldata != undefined) {
                    this.calldata = data.calldata;
                }
                if ("vout" in data && data.vout != undefined) {
                    this.vout = data.vout;
                }
                if ("pointer" in data && data.pointer != undefined) {
                    this.pointer = data.pointer;
                }
                if ("refund_pointer" in data && data.refund_pointer != undefined) {
                    this.refund_pointer = data.refund_pointer;
                }
            }
        }
        get alkanes() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkaneTransfer, 1);
        }
        set alkanes(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get transaction() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0));
        }
        set transaction(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get block() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0));
        }
        set block(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set height(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get txindex() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0);
        }
        set txindex(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get calldata() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0));
        }
        set calldata(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get vout() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set vout(value) {
            pb_1.Message.setField(this, 7, value);
        }
        get pointer() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0);
        }
        set pointer(value) {
            pb_1.Message.setField(this, 8, value);
        }
        get refund_pointer() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0);
        }
        set refund_pointer(value) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data) {
            const message = new MessageContextParcel({});
            if (data.alkanes != null) {
                message.alkanes = data.alkanes.map(item => AlkaneTransfer.fromObject(item));
            }
            if (data.transaction != null) {
                message.transaction = data.transaction;
            }
            if (data.block != null) {
                message.block = data.block;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.txindex != null) {
                message.txindex = data.txindex;
            }
            if (data.calldata != null) {
                message.calldata = data.calldata;
            }
            if (data.vout != null) {
                message.vout = data.vout;
            }
            if (data.pointer != null) {
                message.pointer = data.pointer;
            }
            if (data.refund_pointer != null) {
                message.refund_pointer = data.refund_pointer;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.alkanes != null) {
                data.alkanes = this.alkanes.map((item) => item.toObject());
            }
            if (this.transaction != null) {
                data.transaction = this.transaction;
            }
            if (this.block != null) {
                data.block = this.block;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.txindex != null) {
                data.txindex = this.txindex;
            }
            if (this.calldata != null) {
                data.calldata = this.calldata;
            }
            if (this.vout != null) {
                data.vout = this.vout;
            }
            if (this.pointer != null) {
                data.pointer = this.pointer;
            }
            if (this.refund_pointer != null) {
                data.refund_pointer = this.refund_pointer;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alkanes.length)
                writer.writeRepeatedMessage(1, this.alkanes, (item) => item.serialize(writer));
            if (this.transaction.length)
                writer.writeBytes(2, this.transaction);
            if (this.block.length)
                writer.writeBytes(3, this.block);
            if (this.height != 0)
                writer.writeUint64(4, this.height);
            if (this.txindex != 0)
                writer.writeUint32(6, this.txindex);
            if (this.calldata.length)
                writer.writeBytes(5, this.calldata);
            if (this.vout != 0)
                writer.writeUint32(7, this.vout);
            if (this.pointer != 0)
                writer.writeUint32(8, this.pointer);
            if (this.refund_pointer != 0)
                writer.writeUint32(9, this.refund_pointer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageContextParcel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.alkanes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkaneTransfer.deserialize(reader), AlkaneTransfer));
                        break;
                    case 2:
                        message.transaction = reader.readBytes();
                        break;
                    case 3:
                        message.block = reader.readBytes();
                        break;
                    case 4:
                        message.height = reader.readUint64();
                        break;
                    case 6:
                        message.txindex = reader.readUint32();
                        break;
                    case 5:
                        message.calldata = reader.readBytes();
                        break;
                    case 7:
                        message.vout = reader.readUint32();
                        break;
                    case 8:
                        message.pointer = reader.readUint32();
                        break;
                    case 9:
                        message.refund_pointer = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return MessageContextParcel.deserialize(bytes);
        }
    }
    _MessageContextParcel_one_of_decls = new WeakMap();
    alkanes.MessageContextParcel = MessageContextParcel;
    class KeyValuePair extends pb_1.Message {
        constructor(data) {
            super();
            _KeyValuePair_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _KeyValuePair_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0));
        }
        set key(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0));
        }
        set value(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new KeyValuePair({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeBytes(1, this.key);
            if (this.value.length)
                writer.writeBytes(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyValuePair();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readBytes();
                        break;
                    case 2:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return KeyValuePair.deserialize(bytes);
        }
    }
    _KeyValuePair_one_of_decls = new WeakMap();
    alkanes.KeyValuePair = KeyValuePair;
    class ExtendedCallResponse extends pb_1.Message {
        constructor(data) {
            super();
            _ExtendedCallResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], __classPrivateFieldGet(this, _ExtendedCallResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alkanes" in data && data.alkanes != undefined) {
                    this.alkanes = data.alkanes;
                }
                if ("storage" in data && data.storage != undefined) {
                    this.storage = data.storage;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get alkanes() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkaneTransfer, 1);
        }
        set alkanes(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get storage() {
            return pb_1.Message.getRepeatedWrapperField(this, KeyValuePair, 2);
        }
        set storage(value) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0));
        }
        set data(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new ExtendedCallResponse({});
            if (data.alkanes != null) {
                message.alkanes = data.alkanes.map(item => AlkaneTransfer.fromObject(item));
            }
            if (data.storage != null) {
                message.storage = data.storage.map(item => KeyValuePair.fromObject(item));
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.alkanes != null) {
                data.alkanes = this.alkanes.map((item) => item.toObject());
            }
            if (this.storage != null) {
                data.storage = this.storage.map((item) => item.toObject());
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alkanes.length)
                writer.writeRepeatedMessage(1, this.alkanes, (item) => item.serialize(writer));
            if (this.storage.length)
                writer.writeRepeatedMessage(2, this.storage, (item) => item.serialize(writer));
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtendedCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.alkanes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkaneTransfer.deserialize(reader), AlkaneTransfer));
                        break;
                    case 2:
                        reader.readMessage(message.storage, () => pb_1.Message.addToRepeatedWrapperField(message, 2, KeyValuePair.deserialize(reader), KeyValuePair));
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return ExtendedCallResponse.deserialize(bytes);
        }
    }
    _ExtendedCallResponse_one_of_decls = new WeakMap();
    alkanes.ExtendedCallResponse = ExtendedCallResponse;
    class Context extends pb_1.Message {
        constructor(data) {
            super();
            _Context_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 5], __classPrivateFieldGet(this, _Context_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("myself" in data && data.myself != undefined) {
                    this.myself = data.myself;
                }
                if ("caller" in data && data.caller != undefined) {
                    this.caller = data.caller;
                }
                if ("inputs" in data && data.inputs != undefined) {
                    this.inputs = data.inputs;
                }
                if ("vout" in data && data.vout != undefined) {
                    this.vout = data.vout;
                }
                if ("incoming_alkanes" in data && data.incoming_alkanes != undefined) {
                    this.incoming_alkanes = data.incoming_alkanes;
                }
            }
        }
        get myself() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 1);
        }
        set myself(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_myself() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get caller() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 2);
        }
        set caller(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_caller() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get inputs() {
            return pb_1.Message.getRepeatedWrapperField(this, uint128, 3);
        }
        set inputs(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get vout() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set vout(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get incoming_alkanes() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkaneTransfer, 5);
        }
        set incoming_alkanes(value) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data) {
            const message = new Context({});
            if (data.myself != null) {
                message.myself = AlkaneId.fromObject(data.myself);
            }
            if (data.caller != null) {
                message.caller = AlkaneId.fromObject(data.caller);
            }
            if (data.inputs != null) {
                message.inputs = data.inputs.map(item => uint128.fromObject(item));
            }
            if (data.vout != null) {
                message.vout = data.vout;
            }
            if (data.incoming_alkanes != null) {
                message.incoming_alkanes = data.incoming_alkanes.map(item => AlkaneTransfer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.myself != null) {
                data.myself = this.myself.toObject();
            }
            if (this.caller != null) {
                data.caller = this.caller.toObject();
            }
            if (this.inputs != null) {
                data.inputs = this.inputs.map((item) => item.toObject());
            }
            if (this.vout != null) {
                data.vout = this.vout;
            }
            if (this.incoming_alkanes != null) {
                data.incoming_alkanes = this.incoming_alkanes.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_myself)
                writer.writeMessage(1, this.myself, () => this.myself.serialize(writer));
            if (this.has_caller)
                writer.writeMessage(2, this.caller, () => this.caller.serialize(writer));
            if (this.inputs.length)
                writer.writeRepeatedMessage(3, this.inputs, (item) => item.serialize(writer));
            if (this.vout != 0)
                writer.writeUint32(4, this.vout);
            if (this.incoming_alkanes.length)
                writer.writeRepeatedMessage(5, this.incoming_alkanes, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Context();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.myself, () => message.myself = AlkaneId.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.caller, () => message.caller = AlkaneId.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.inputs, () => pb_1.Message.addToRepeatedWrapperField(message, 3, uint128.deserialize(reader), uint128));
                        break;
                    case 4:
                        message.vout = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.incoming_alkanes, () => pb_1.Message.addToRepeatedWrapperField(message, 5, AlkaneTransfer.deserialize(reader), AlkaneTransfer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Context.deserialize(bytes);
        }
    }
    _Context_one_of_decls = new WeakMap();
    alkanes.Context = Context;
    class TraceContext extends pb_1.Message {
        constructor(data) {
            super();
            _TraceContext_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _TraceContext_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inner" in data && data.inner != undefined) {
                    this.inner = data.inner;
                }
                if ("fuel" in data && data.fuel != undefined) {
                    this.fuel = data.fuel;
                }
            }
        }
        get inner() {
            return pb_1.Message.getWrapperField(this, Context, 1);
        }
        set inner(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_inner() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get fuel() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set fuel(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new TraceContext({});
            if (data.inner != null) {
                message.inner = Context.fromObject(data.inner);
            }
            if (data.fuel != null) {
                message.fuel = data.fuel;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.inner != null) {
                data.inner = this.inner.toObject();
            }
            if (this.fuel != null) {
                data.fuel = this.fuel;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_inner)
                writer.writeMessage(1, this.inner, () => this.inner.serialize(writer));
            if (this.fuel != 0)
                writer.writeUint64(2, this.fuel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TraceContext();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inner, () => message.inner = Context.deserialize(reader));
                        break;
                    case 2:
                        message.fuel = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return TraceContext.deserialize(bytes);
        }
    }
    _TraceContext_one_of_decls = new WeakMap();
    alkanes.TraceContext = TraceContext;
    class AlkanesEnterContext extends pb_1.Message {
        constructor(data) {
            super();
            _AlkanesEnterContext_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AlkanesEnterContext_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("call_type" in data && data.call_type != undefined) {
                    this.call_type = data.call_type;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get call_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AlkanesTraceCallType.NONE);
        }
        set call_type(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, TraceContext, 2);
        }
        set context(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data) {
            const message = new AlkanesEnterContext({});
            if (data.call_type != null) {
                message.call_type = data.call_type;
            }
            if (data.context != null) {
                message.context = TraceContext.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.call_type != null) {
                data.call_type = this.call_type;
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.call_type != AlkanesTraceCallType.NONE)
                writer.writeEnum(1, this.call_type);
            if (this.has_context)
                writer.writeMessage(2, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesEnterContext();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.call_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.context, () => message.context = TraceContext.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkanesEnterContext.deserialize(bytes);
        }
    }
    _AlkanesEnterContext_one_of_decls = new WeakMap();
    alkanes.AlkanesEnterContext = AlkanesEnterContext;
    class AlkanesExitContext extends pb_1.Message {
        constructor(data) {
            super();
            _AlkanesExitContext_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AlkanesExitContext_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, AlkanesTraceStatusFlag.SUCCESS);
        }
        set status(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get response() {
            return pb_1.Message.getWrapperField(this, ExtendedCallResponse, 2);
        }
        set response(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data) {
            const message = new AlkanesExitContext({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.response != null) {
                message.response = ExtendedCallResponse.fromObject(data.response);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != AlkanesTraceStatusFlag.SUCCESS)
                writer.writeEnum(1, this.status);
            if (this.has_response)
                writer.writeMessage(2, this.response, () => this.response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesExitContext();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.response, () => message.response = ExtendedCallResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkanesExitContext.deserialize(bytes);
        }
    }
    _AlkanesExitContext_one_of_decls = new WeakMap();
    alkanes.AlkanesExitContext = AlkanesExitContext;
    class AlkanesCreate extends pb_1.Message {
        constructor(data) {
            super();
            _AlkanesCreate_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AlkanesCreate_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_alkane" in data && data.new_alkane != undefined) {
                    this.new_alkane = data.new_alkane;
                }
            }
        }
        get new_alkane() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 1);
        }
        set new_alkane(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_new_alkane() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data) {
            const message = new AlkanesCreate({});
            if (data.new_alkane != null) {
                message.new_alkane = AlkaneId.fromObject(data.new_alkane);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.new_alkane != null) {
                data.new_alkane = this.new_alkane.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_alkane)
                writer.writeMessage(1, this.new_alkane, () => this.new_alkane.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesCreate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_alkane, () => message.new_alkane = AlkaneId.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkanesCreate.deserialize(bytes);
        }
    }
    _AlkanesCreate_one_of_decls = new WeakMap();
    alkanes.AlkanesCreate = AlkanesCreate;
    class AlkanesTraceEvent extends pb_1.Message {
        constructor(data) {
            super();
            _AlkanesTraceEvent_one_of_decls.set(this, [[1, 2, 3]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AlkanesTraceEvent_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enter_context" in data && data.enter_context != undefined) {
                    this.enter_context = data.enter_context;
                }
                if ("exit_context" in data && data.exit_context != undefined) {
                    this.exit_context = data.exit_context;
                }
                if ("create_alkane" in data && data.create_alkane != undefined) {
                    this.create_alkane = data.create_alkane;
                }
            }
        }
        get enter_context() {
            return pb_1.Message.getWrapperField(this, AlkanesEnterContext, 1);
        }
        set enter_context(value) {
            pb_1.Message.setOneofWrapperField(this, 1, __classPrivateFieldGet(this, _AlkanesTraceEvent_one_of_decls, "f")[0], value);
        }
        get has_enter_context() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get exit_context() {
            return pb_1.Message.getWrapperField(this, AlkanesExitContext, 2);
        }
        set exit_context(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, _AlkanesTraceEvent_one_of_decls, "f")[0], value);
        }
        get has_exit_context() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get create_alkane() {
            return pb_1.Message.getWrapperField(this, AlkanesCreate, 3);
        }
        set create_alkane(value) {
            pb_1.Message.setOneofWrapperField(this, 3, __classPrivateFieldGet(this, _AlkanesTraceEvent_one_of_decls, "f")[0], value);
        }
        get has_create_alkane() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get event() {
            const cases = {
                0: "none",
                1: "enter_context",
                2: "exit_context",
                3: "create_alkane"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data) {
            const message = new AlkanesTraceEvent({});
            if (data.enter_context != null) {
                message.enter_context = AlkanesEnterContext.fromObject(data.enter_context);
            }
            if (data.exit_context != null) {
                message.exit_context = AlkanesExitContext.fromObject(data.exit_context);
            }
            if (data.create_alkane != null) {
                message.create_alkane = AlkanesCreate.fromObject(data.create_alkane);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.enter_context != null) {
                data.enter_context = this.enter_context.toObject();
            }
            if (this.exit_context != null) {
                data.exit_context = this.exit_context.toObject();
            }
            if (this.create_alkane != null) {
                data.create_alkane = this.create_alkane.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_enter_context)
                writer.writeMessage(1, this.enter_context, () => this.enter_context.serialize(writer));
            if (this.has_exit_context)
                writer.writeMessage(2, this.exit_context, () => this.exit_context.serialize(writer));
            if (this.has_create_alkane)
                writer.writeMessage(3, this.create_alkane, () => this.create_alkane.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesTraceEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.enter_context, () => message.enter_context = AlkanesEnterContext.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.exit_context, () => message.exit_context = AlkanesExitContext.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.create_alkane, () => message.create_alkane = AlkanesCreate.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkanesTraceEvent.deserialize(bytes);
        }
    }
    _AlkanesTraceEvent_one_of_decls = new WeakMap();
    alkanes.AlkanesTraceEvent = AlkanesTraceEvent;
    class AlkanesTrace extends pb_1.Message {
        constructor(data) {
            super();
            _AlkanesTrace_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _AlkanesTrace_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkanesTraceEvent, 1);
        }
        set events(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new AlkanesTrace({});
            if (data.events != null) {
                message.events = data.events.map(item => AlkanesTraceEvent.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.events != null) {
                data.events = this.events.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesTrace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkanesTraceEvent.deserialize(reader), AlkanesTraceEvent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkanesTrace.deserialize(bytes);
        }
    }
    _AlkanesTrace_one_of_decls = new WeakMap();
    alkanes.AlkanesTrace = AlkanesTrace;
    class SimulateResponse extends pb_1.Message {
        constructor(data) {
            super();
            _SimulateResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SimulateResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("execution" in data && data.execution != undefined) {
                    this.execution = data.execution;
                }
                if ("gas_used" in data && data.gas_used != undefined) {
                    this.gas_used = data.gas_used;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get execution() {
            return pb_1.Message.getWrapperField(this, ExtendedCallResponse, 1);
        }
        set execution(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_execution() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get gas_used() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set gas_used(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, "");
        }
        set error(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new SimulateResponse({});
            if (data.execution != null) {
                message.execution = ExtendedCallResponse.fromObject(data.execution);
            }
            if (data.gas_used != null) {
                message.gas_used = data.gas_used;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.execution != null) {
                data.execution = this.execution.toObject();
            }
            if (this.gas_used != null) {
                data.gas_used = this.gas_used;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_execution)
                writer.writeMessage(1, this.execution, () => this.execution.serialize(writer));
            if (this.gas_used != 0)
                writer.writeUint64(2, this.gas_used);
            if (this.error.length)
                writer.writeString(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimulateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.execution, () => message.execution = ExtendedCallResponse.deserialize(reader));
                        break;
                    case 2:
                        message.gas_used = reader.readUint64();
                        break;
                    case 3:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return SimulateResponse.deserialize(bytes);
        }
    }
    _SimulateResponse_one_of_decls = new WeakMap();
    alkanes.SimulateResponse = SimulateResponse;
    class AlkaneInventoryRequest extends pb_1.Message {
        constructor(data) {
            super();
            _AlkaneInventoryRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AlkaneInventoryRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 1);
        }
        set id(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data) {
            const message = new AlkaneInventoryRequest({});
            if (data.id != null) {
                message.id = AlkaneId.fromObject(data.id);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.id != null) {
                data.id = this.id.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id)
                writer.writeMessage(1, this.id, () => this.id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkaneInventoryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.id, () => message.id = AlkaneId.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkaneInventoryRequest.deserialize(bytes);
        }
    }
    _AlkaneInventoryRequest_one_of_decls = new WeakMap();
    alkanes.AlkaneInventoryRequest = AlkaneInventoryRequest;
    class AlkaneInventoryResponse extends pb_1.Message {
        constructor(data) {
            super();
            _AlkaneInventoryResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _AlkaneInventoryResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alkanes" in data && data.alkanes != undefined) {
                    this.alkanes = data.alkanes;
                }
            }
        }
        get alkanes() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkaneTransfer, 1);
        }
        set alkanes(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new AlkaneInventoryResponse({});
            if (data.alkanes != null) {
                message.alkanes = data.alkanes.map(item => AlkaneTransfer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.alkanes != null) {
                data.alkanes = this.alkanes.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alkanes.length)
                writer.writeRepeatedMessage(1, this.alkanes, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkaneInventoryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.alkanes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkaneTransfer.deserialize(reader), AlkaneTransfer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AlkaneInventoryResponse.deserialize(bytes);
        }
    }
    _AlkaneInventoryResponse_one_of_decls = new WeakMap();
    alkanes.AlkaneInventoryResponse = AlkaneInventoryResponse;
})(alkanes || (exports.alkanes = alkanes = {}));
//# sourceMappingURL=alkanes.js.map