// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck
// @generated from protobuf file "alkanes.proto" (package "alkanes", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message alkanes.uint128
 */
export interface uint128 {
    /**
     * @generated from protobuf field: uint64 lo = 1 [jstype = JS_STRING];
     */
    lo: string;
    /**
     * @generated from protobuf field: uint64 hi = 2 [jstype = JS_STRING];
     */
    hi: string;
}
/**
 * @generated from protobuf message alkanes.AlkaneId
 */
export interface AlkaneId {
    /**
     * @generated from protobuf field: alkanes.uint128 block = 1;
     */
    block?: uint128;
    /**
     * @generated from protobuf field: alkanes.uint128 tx = 2;
     */
    tx?: uint128;
}
/**
 * @generated from protobuf message alkanes.AlkaneTransfer
 */
export interface AlkaneTransfer {
    /**
     * @generated from protobuf field: alkanes.AlkaneId id = 1;
     */
    id?: AlkaneId;
    /**
     * @generated from protobuf field: alkanes.uint128 value = 2;
     */
    value?: uint128;
}
/**
 * @generated from protobuf message alkanes.MessageContextParcel
 */
export interface MessageContextParcel {
    /**
     * @generated from protobuf field: repeated alkanes.AlkaneTransfer alkanes = 1;
     */
    alkanes: AlkaneTransfer[];
    /**
     * @generated from protobuf field: bytes transaction = 2;
     */
    transaction: Uint8Array;
    /**
     * @generated from protobuf field: bytes block = 3;
     */
    block: Uint8Array;
    /**
     * @generated from protobuf field: uint64 height = 4;
     */
    height: bigint;
    /**
     * @generated from protobuf field: uint32 txindex = 6;
     */
    txindex: number;
    /**
     * @generated from protobuf field: bytes calldata = 5;
     */
    calldata: Uint8Array;
    /**
     * @generated from protobuf field: uint32 vout = 7;
     */
    vout: number;
    /**
     * @generated from protobuf field: uint32 pointer = 8;
     */
    pointer: number;
    /**
     * @generated from protobuf field: uint32 refund_pointer = 9;
     */
    refundPointer: number;
}
/**
 * @generated from protobuf message alkanes.KeyValuePair
 */
export interface KeyValuePair {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message alkanes.ExtendedCallResponse
 */
export interface ExtendedCallResponse {
    /**
     * @generated from protobuf field: repeated alkanes.AlkaneTransfer alkanes = 1;
     */
    alkanes: AlkaneTransfer[];
    /**
     * @generated from protobuf field: repeated alkanes.KeyValuePair storage = 2;
     */
    storage: KeyValuePair[];
    /**
     * @generated from protobuf field: bytes data = 3;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message alkanes.Context
 */
export interface Context {
    /**
     * @generated from protobuf field: alkanes.AlkaneId myself = 1;
     */
    myself?: AlkaneId;
    /**
     * @generated from protobuf field: alkanes.AlkaneId caller = 2;
     */
    caller?: AlkaneId;
    /**
     * @generated from protobuf field: repeated alkanes.uint128 inputs = 3;
     */
    inputs: uint128[];
    /**
     * @generated from protobuf field: uint32 vout = 4;
     */
    vout: number;
    /**
     * @generated from protobuf field: repeated alkanes.AlkaneTransfer incoming_alkanes = 5;
     */
    incomingAlkanes: AlkaneTransfer[];
}
/**
 * @generated from protobuf message alkanes.TraceContext
 */
export interface TraceContext {
    /**
     * @generated from protobuf field: alkanes.Context inner = 1;
     */
    inner?: Context;
    /**
     * @generated from protobuf field: uint64 fuel = 2;
     */
    fuel: bigint;
}
/**
 * @generated from protobuf message alkanes.AlkanesEnterContext
 */
export interface AlkanesEnterContext {
    /**
     * @generated from protobuf field: alkanes.AlkanesTraceCallType call_type = 1;
     */
    callType: AlkanesTraceCallType;
    /**
     * @generated from protobuf field: alkanes.TraceContext context = 2;
     */
    context?: TraceContext;
}
/**
 * @generated from protobuf message alkanes.AlkanesExitContext
 */
export interface AlkanesExitContext {
    /**
     * @generated from protobuf field: alkanes.AlkanesTraceStatusFlag status = 1;
     */
    status: AlkanesTraceStatusFlag;
    /**
     * @generated from protobuf field: alkanes.ExtendedCallResponse response = 2;
     */
    response?: ExtendedCallResponse;
}
/**
 * @generated from protobuf message alkanes.AlkanesCreate
 */
export interface AlkanesCreate {
    /**
     * @generated from protobuf field: alkanes.AlkaneId new_alkane = 1;
     */
    newAlkane?: AlkaneId;
}
/**
 * @generated from protobuf message alkanes.AlkanesTraceEvent
 */
export interface AlkanesTraceEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "enterContext";
        /**
         * @generated from protobuf field: alkanes.AlkanesEnterContext enter_context = 1;
         */
        enterContext: AlkanesEnterContext;
    } | {
        oneofKind: "exitContext";
        /**
         * @generated from protobuf field: alkanes.AlkanesExitContext exit_context = 2;
         */
        exitContext: AlkanesExitContext;
    } | {
        oneofKind: "createAlkane";
        /**
         * @generated from protobuf field: alkanes.AlkanesCreate create_alkane = 3;
         */
        createAlkane: AlkanesCreate;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message alkanes.AlkanesTrace
 */
export interface AlkanesTrace {
    /**
     * @generated from protobuf field: repeated alkanes.AlkanesTraceEvent events = 1;
     */
    events: AlkanesTraceEvent[];
}
/**
 * @generated from protobuf message alkanes.SimulateResponse
 */
export interface SimulateResponse {
    /**
     * @generated from protobuf field: alkanes.ExtendedCallResponse execution = 1;
     */
    execution?: ExtendedCallResponse;
    /**
     * @generated from protobuf field: uint64 gas_used = 2;
     */
    gasUsed: bigint;
    /**
     * @generated from protobuf field: string error = 3;
     */
    error: string;
}
/**
 * @generated from protobuf message alkanes.AlkaneInventoryRequest
 */
export interface AlkaneInventoryRequest {
    /**
     * @generated from protobuf field: alkanes.AlkaneId id = 1;
     */
    id?: AlkaneId;
}
/**
 * @generated from protobuf message alkanes.AlkaneInventoryResponse
 */
export interface AlkaneInventoryResponse {
    /**
     * @generated from protobuf field: repeated alkanes.AlkaneTransfer alkanes = 1;
     */
    alkanes: AlkaneTransfer[];
}
/**
 * @generated from protobuf enum alkanes.AlkanesTraceCallType
 */
export enum AlkanesTraceCallType {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CALL = 1;
     */
    CALL = 1,
    /**
     * @generated from protobuf enum value: DELEGATECALL = 2;
     */
    DELEGATECALL = 2,
    /**
     * @generated from protobuf enum value: STATICCALL = 3;
     */
    STATICCALL = 3
}
/**
 * @generated from protobuf enum alkanes.AlkanesTraceStatusFlag
 */
export enum AlkanesTraceStatusFlag {
    /**
     * @generated from protobuf enum value: SUCCESS = 0;
     */
    SUCCESS = 0,
    /**
     * @generated from protobuf enum value: FAILURE = 1;
     */
    FAILURE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class uint128$Type extends MessageType<uint128> {
    constructor() {
        super("alkanes.uint128", [
            { no: 1, name: "lo", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "hi", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<uint128>): uint128 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lo = "0";
        message.hi = "0";
        if (value !== undefined)
            reflectionMergePartial<uint128>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: uint128): uint128 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 lo = 1 [jstype = JS_STRING];*/ 1:
                    message.lo = reader.uint64().toString();
                    break;
                case /* uint64 hi = 2 [jstype = JS_STRING];*/ 2:
                    message.hi = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: uint128, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 lo = 1 [jstype = JS_STRING]; */
        if (message.lo !== "0")
            writer.tag(1, WireType.Varint).uint64(message.lo);
        /* uint64 hi = 2 [jstype = JS_STRING]; */
        if (message.hi !== "0")
            writer.tag(2, WireType.Varint).uint64(message.hi);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.uint128
 */
export const uint128 = new uint128$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkaneId$Type extends MessageType<AlkaneId> {
    constructor() {
        super("alkanes.AlkaneId", [
            { no: 1, name: "block", kind: "message", T: () => uint128 },
            { no: 2, name: "tx", kind: "message", T: () => uint128 }
        ]);
    }
    create(value?: PartialMessage<AlkaneId>): AlkaneId {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AlkaneId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkaneId): AlkaneId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.uint128 block */ 1:
                    message.block = uint128.internalBinaryRead(reader, reader.uint32(), options, message.block);
                    break;
                case /* alkanes.uint128 tx */ 2:
                    message.tx = uint128.internalBinaryRead(reader, reader.uint32(), options, message.tx);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkaneId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.uint128 block = 1; */
        if (message.block)
            uint128.internalBinaryWrite(message.block, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* alkanes.uint128 tx = 2; */
        if (message.tx)
            uint128.internalBinaryWrite(message.tx, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkaneId
 */
export const AlkaneId = new AlkaneId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkaneTransfer$Type extends MessageType<AlkaneTransfer> {
    constructor() {
        super("alkanes.AlkaneTransfer", [
            { no: 1, name: "id", kind: "message", T: () => AlkaneId },
            { no: 2, name: "value", kind: "message", T: () => uint128 }
        ]);
    }
    create(value?: PartialMessage<AlkaneTransfer>): AlkaneTransfer {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AlkaneTransfer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkaneTransfer): AlkaneTransfer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.AlkaneId id */ 1:
                    message.id = AlkaneId.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* alkanes.uint128 value */ 2:
                    message.value = uint128.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkaneTransfer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.AlkaneId id = 1; */
        if (message.id)
            AlkaneId.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* alkanes.uint128 value = 2; */
        if (message.value)
            uint128.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkaneTransfer
 */
export const AlkaneTransfer = new AlkaneTransfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageContextParcel$Type extends MessageType<MessageContextParcel> {
    constructor() {
        super("alkanes.MessageContextParcel", [
            { no: 1, name: "alkanes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AlkaneTransfer },
            { no: 2, name: "transaction", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "block", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "height", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "txindex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "calldata", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "vout", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "refund_pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MessageContextParcel>): MessageContextParcel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.alkanes = [];
        message.transaction = new Uint8Array(0);
        message.block = new Uint8Array(0);
        message.height = 0n;
        message.txindex = 0;
        message.calldata = new Uint8Array(0);
        message.vout = 0;
        message.pointer = 0;
        message.refundPointer = 0;
        if (value !== undefined)
            reflectionMergePartial<MessageContextParcel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageContextParcel): MessageContextParcel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated alkanes.AlkaneTransfer alkanes */ 1:
                    message.alkanes.push(AlkaneTransfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes transaction */ 2:
                    message.transaction = reader.bytes();
                    break;
                case /* bytes block */ 3:
                    message.block = reader.bytes();
                    break;
                case /* uint64 height */ 4:
                    message.height = reader.uint64().toBigInt();
                    break;
                case /* uint32 txindex */ 6:
                    message.txindex = reader.uint32();
                    break;
                case /* bytes calldata */ 5:
                    message.calldata = reader.bytes();
                    break;
                case /* uint32 vout */ 7:
                    message.vout = reader.uint32();
                    break;
                case /* uint32 pointer */ 8:
                    message.pointer = reader.uint32();
                    break;
                case /* uint32 refund_pointer */ 9:
                    message.refundPointer = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageContextParcel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated alkanes.AlkaneTransfer alkanes = 1; */
        for (let i = 0; i < message.alkanes.length; i++)
            AlkaneTransfer.internalBinaryWrite(message.alkanes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes transaction = 2; */
        if (message.transaction.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.transaction);
        /* bytes block = 3; */
        if (message.block.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.block);
        /* uint64 height = 4; */
        if (message.height !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.height);
        /* uint32 txindex = 6; */
        if (message.txindex !== 0)
            writer.tag(6, WireType.Varint).uint32(message.txindex);
        /* bytes calldata = 5; */
        if (message.calldata.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.calldata);
        /* uint32 vout = 7; */
        if (message.vout !== 0)
            writer.tag(7, WireType.Varint).uint32(message.vout);
        /* uint32 pointer = 8; */
        if (message.pointer !== 0)
            writer.tag(8, WireType.Varint).uint32(message.pointer);
        /* uint32 refund_pointer = 9; */
        if (message.refundPointer !== 0)
            writer.tag(9, WireType.Varint).uint32(message.refundPointer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.MessageContextParcel
 */
export const MessageContextParcel = new MessageContextParcel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeyValuePair$Type extends MessageType<KeyValuePair> {
    constructor() {
        super("alkanes.KeyValuePair", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<KeyValuePair>): KeyValuePair {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = new Uint8Array(0);
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<KeyValuePair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyValuePair): KeyValuePair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeyValuePair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 2; */
        if (message.value.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.KeyValuePair
 */
export const KeyValuePair = new KeyValuePair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtendedCallResponse$Type extends MessageType<ExtendedCallResponse> {
    constructor() {
        super("alkanes.ExtendedCallResponse", [
            { no: 1, name: "alkanes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AlkaneTransfer },
            { no: 2, name: "storage", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeyValuePair },
            { no: 3, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ExtendedCallResponse>): ExtendedCallResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.alkanes = [];
        message.storage = [];
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ExtendedCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtendedCallResponse): ExtendedCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated alkanes.AlkaneTransfer alkanes */ 1:
                    message.alkanes.push(AlkaneTransfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated alkanes.KeyValuePair storage */ 2:
                    message.storage.push(KeyValuePair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes data */ 3:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtendedCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated alkanes.AlkaneTransfer alkanes = 1; */
        for (let i = 0; i < message.alkanes.length; i++)
            AlkaneTransfer.internalBinaryWrite(message.alkanes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated alkanes.KeyValuePair storage = 2; */
        for (let i = 0; i < message.storage.length; i++)
            KeyValuePair.internalBinaryWrite(message.storage[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 3; */
        if (message.data.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.ExtendedCallResponse
 */
export const ExtendedCallResponse = new ExtendedCallResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Context$Type extends MessageType<Context> {
    constructor() {
        super("alkanes.Context", [
            { no: 1, name: "myself", kind: "message", T: () => AlkaneId },
            { no: 2, name: "caller", kind: "message", T: () => AlkaneId },
            { no: 3, name: "inputs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => uint128 },
            { no: 4, name: "vout", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "incoming_alkanes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AlkaneTransfer }
        ]);
    }
    create(value?: PartialMessage<Context>): Context {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inputs = [];
        message.vout = 0;
        message.incomingAlkanes = [];
        if (value !== undefined)
            reflectionMergePartial<Context>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Context): Context {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.AlkaneId myself */ 1:
                    message.myself = AlkaneId.internalBinaryRead(reader, reader.uint32(), options, message.myself);
                    break;
                case /* alkanes.AlkaneId caller */ 2:
                    message.caller = AlkaneId.internalBinaryRead(reader, reader.uint32(), options, message.caller);
                    break;
                case /* repeated alkanes.uint128 inputs */ 3:
                    message.inputs.push(uint128.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 vout */ 4:
                    message.vout = reader.uint32();
                    break;
                case /* repeated alkanes.AlkaneTransfer incoming_alkanes */ 5:
                    message.incomingAlkanes.push(AlkaneTransfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Context, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.AlkaneId myself = 1; */
        if (message.myself)
            AlkaneId.internalBinaryWrite(message.myself, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* alkanes.AlkaneId caller = 2; */
        if (message.caller)
            AlkaneId.internalBinaryWrite(message.caller, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated alkanes.uint128 inputs = 3; */
        for (let i = 0; i < message.inputs.length; i++)
            uint128.internalBinaryWrite(message.inputs[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 vout = 4; */
        if (message.vout !== 0)
            writer.tag(4, WireType.Varint).uint32(message.vout);
        /* repeated alkanes.AlkaneTransfer incoming_alkanes = 5; */
        for (let i = 0; i < message.incomingAlkanes.length; i++)
            AlkaneTransfer.internalBinaryWrite(message.incomingAlkanes[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.Context
 */
export const Context = new Context$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraceContext$Type extends MessageType<TraceContext> {
    constructor() {
        super("alkanes.TraceContext", [
            { no: 1, name: "inner", kind: "message", T: () => Context },
            { no: 2, name: "fuel", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TraceContext>): TraceContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fuel = 0n;
        if (value !== undefined)
            reflectionMergePartial<TraceContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraceContext): TraceContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.Context inner */ 1:
                    message.inner = Context.internalBinaryRead(reader, reader.uint32(), options, message.inner);
                    break;
                case /* uint64 fuel */ 2:
                    message.fuel = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraceContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.Context inner = 1; */
        if (message.inner)
            Context.internalBinaryWrite(message.inner, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 fuel = 2; */
        if (message.fuel !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.fuel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.TraceContext
 */
export const TraceContext = new TraceContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkanesEnterContext$Type extends MessageType<AlkanesEnterContext> {
    constructor() {
        super("alkanes.AlkanesEnterContext", [
            { no: 1, name: "call_type", kind: "enum", T: () => ["alkanes.AlkanesTraceCallType", AlkanesTraceCallType] },
            { no: 2, name: "context", kind: "message", T: () => TraceContext }
        ]);
    }
    create(value?: PartialMessage<AlkanesEnterContext>): AlkanesEnterContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.callType = 0;
        if (value !== undefined)
            reflectionMergePartial<AlkanesEnterContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkanesEnterContext): AlkanesEnterContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.AlkanesTraceCallType call_type */ 1:
                    message.callType = reader.int32();
                    break;
                case /* alkanes.TraceContext context */ 2:
                    message.context = TraceContext.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkanesEnterContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.AlkanesTraceCallType call_type = 1; */
        if (message.callType !== 0)
            writer.tag(1, WireType.Varint).int32(message.callType);
        /* alkanes.TraceContext context = 2; */
        if (message.context)
            TraceContext.internalBinaryWrite(message.context, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkanesEnterContext
 */
export const AlkanesEnterContext = new AlkanesEnterContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkanesExitContext$Type extends MessageType<AlkanesExitContext> {
    constructor() {
        super("alkanes.AlkanesExitContext", [
            { no: 1, name: "status", kind: "enum", T: () => ["alkanes.AlkanesTraceStatusFlag", AlkanesTraceStatusFlag] },
            { no: 2, name: "response", kind: "message", T: () => ExtendedCallResponse }
        ]);
    }
    create(value?: PartialMessage<AlkanesExitContext>): AlkanesExitContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<AlkanesExitContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkanesExitContext): AlkanesExitContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.AlkanesTraceStatusFlag status */ 1:
                    message.status = reader.int32();
                    break;
                case /* alkanes.ExtendedCallResponse response */ 2:
                    message.response = ExtendedCallResponse.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkanesExitContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.AlkanesTraceStatusFlag status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* alkanes.ExtendedCallResponse response = 2; */
        if (message.response)
            ExtendedCallResponse.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkanesExitContext
 */
export const AlkanesExitContext = new AlkanesExitContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkanesCreate$Type extends MessageType<AlkanesCreate> {
    constructor() {
        super("alkanes.AlkanesCreate", [
            { no: 1, name: "new_alkane", kind: "message", T: () => AlkaneId }
        ]);
    }
    create(value?: PartialMessage<AlkanesCreate>): AlkanesCreate {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AlkanesCreate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkanesCreate): AlkanesCreate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.AlkaneId new_alkane */ 1:
                    message.newAlkane = AlkaneId.internalBinaryRead(reader, reader.uint32(), options, message.newAlkane);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkanesCreate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.AlkaneId new_alkane = 1; */
        if (message.newAlkane)
            AlkaneId.internalBinaryWrite(message.newAlkane, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkanesCreate
 */
export const AlkanesCreate = new AlkanesCreate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkanesTraceEvent$Type extends MessageType<AlkanesTraceEvent> {
    constructor() {
        super("alkanes.AlkanesTraceEvent", [
            { no: 1, name: "enter_context", kind: "message", oneof: "event", T: () => AlkanesEnterContext },
            { no: 2, name: "exit_context", kind: "message", oneof: "event", T: () => AlkanesExitContext },
            { no: 3, name: "create_alkane", kind: "message", oneof: "event", T: () => AlkanesCreate }
        ]);
    }
    create(value?: PartialMessage<AlkanesTraceEvent>): AlkanesTraceEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<AlkanesTraceEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkanesTraceEvent): AlkanesTraceEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.AlkanesEnterContext enter_context */ 1:
                    message.event = {
                        oneofKind: "enterContext",
                        enterContext: AlkanesEnterContext.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).enterContext)
                    };
                    break;
                case /* alkanes.AlkanesExitContext exit_context */ 2:
                    message.event = {
                        oneofKind: "exitContext",
                        exitContext: AlkanesExitContext.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).exitContext)
                    };
                    break;
                case /* alkanes.AlkanesCreate create_alkane */ 3:
                    message.event = {
                        oneofKind: "createAlkane",
                        createAlkane: AlkanesCreate.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).createAlkane)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkanesTraceEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.AlkanesEnterContext enter_context = 1; */
        if (message.event.oneofKind === "enterContext")
            AlkanesEnterContext.internalBinaryWrite(message.event.enterContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* alkanes.AlkanesExitContext exit_context = 2; */
        if (message.event.oneofKind === "exitContext")
            AlkanesExitContext.internalBinaryWrite(message.event.exitContext, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* alkanes.AlkanesCreate create_alkane = 3; */
        if (message.event.oneofKind === "createAlkane")
            AlkanesCreate.internalBinaryWrite(message.event.createAlkane, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkanesTraceEvent
 */
export const AlkanesTraceEvent = new AlkanesTraceEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkanesTrace$Type extends MessageType<AlkanesTrace> {
    constructor() {
        super("alkanes.AlkanesTrace", [
            { no: 1, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AlkanesTraceEvent }
        ]);
    }
    create(value?: PartialMessage<AlkanesTrace>): AlkanesTrace {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.events = [];
        if (value !== undefined)
            reflectionMergePartial<AlkanesTrace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkanesTrace): AlkanesTrace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated alkanes.AlkanesTraceEvent events */ 1:
                    message.events.push(AlkanesTraceEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkanesTrace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated alkanes.AlkanesTraceEvent events = 1; */
        for (let i = 0; i < message.events.length; i++)
            AlkanesTraceEvent.internalBinaryWrite(message.events[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkanesTrace
 */
export const AlkanesTrace = new AlkanesTrace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimulateResponse$Type extends MessageType<SimulateResponse> {
    constructor() {
        super("alkanes.SimulateResponse", [
            { no: 1, name: "execution", kind: "message", T: () => ExtendedCallResponse },
            { no: 2, name: "gas_used", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SimulateResponse>): SimulateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gasUsed = 0n;
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<SimulateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimulateResponse): SimulateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.ExtendedCallResponse execution */ 1:
                    message.execution = ExtendedCallResponse.internalBinaryRead(reader, reader.uint32(), options, message.execution);
                    break;
                case /* uint64 gas_used */ 2:
                    message.gasUsed = reader.uint64().toBigInt();
                    break;
                case /* string error */ 3:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimulateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.ExtendedCallResponse execution = 1; */
        if (message.execution)
            ExtendedCallResponse.internalBinaryWrite(message.execution, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 gas_used = 2; */
        if (message.gasUsed !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.gasUsed);
        /* string error = 3; */
        if (message.error !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.SimulateResponse
 */
export const SimulateResponse = new SimulateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkaneInventoryRequest$Type extends MessageType<AlkaneInventoryRequest> {
    constructor() {
        super("alkanes.AlkaneInventoryRequest", [
            { no: 1, name: "id", kind: "message", T: () => AlkaneId }
        ]);
    }
    create(value?: PartialMessage<AlkaneInventoryRequest>): AlkaneInventoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AlkaneInventoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkaneInventoryRequest): AlkaneInventoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* alkanes.AlkaneId id */ 1:
                    message.id = AlkaneId.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkaneInventoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* alkanes.AlkaneId id = 1; */
        if (message.id)
            AlkaneId.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkaneInventoryRequest
 */
export const AlkaneInventoryRequest = new AlkaneInventoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlkaneInventoryResponse$Type extends MessageType<AlkaneInventoryResponse> {
    constructor() {
        super("alkanes.AlkaneInventoryResponse", [
            { no: 1, name: "alkanes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AlkaneTransfer }
        ]);
    }
    create(value?: PartialMessage<AlkaneInventoryResponse>): AlkaneInventoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.alkanes = [];
        if (value !== undefined)
            reflectionMergePartial<AlkaneInventoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlkaneInventoryResponse): AlkaneInventoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated alkanes.AlkaneTransfer alkanes */ 1:
                    message.alkanes.push(AlkaneTransfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlkaneInventoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated alkanes.AlkaneTransfer alkanes = 1; */
        for (let i = 0; i < message.alkanes.length; i++)
            AlkaneTransfer.internalBinaryWrite(message.alkanes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message alkanes.AlkaneInventoryResponse
 */
export const AlkaneInventoryResponse = new AlkaneInventoryResponse$Type();
