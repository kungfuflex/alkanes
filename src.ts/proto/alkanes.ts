/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: alkanes.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace alkanes {
    export enum AlkanesTraceCallType {
        NONE = 0,
        CALL = 1,
        DELEGATECALL = 2,
        STATICCALL = 3
    }
    export enum AlkanesTraceStatusFlag {
        SUCCESS = 0,
        FAILURE = 1
    }
    export class uint128 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            lo?: string;
            hi?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lo" in data && data.lo != undefined) {
                    this.lo = data.lo;
                }
                if ("hi" in data && data.hi != undefined) {
                    this.hi = data.hi;
                }
            }
        }
        get lo() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set lo(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get hi() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set hi(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            lo?: string;
            hi?: string;
        }): uint128 {
            const message = new uint128({});
            if (data.lo != null) {
                message.lo = data.lo;
            }
            if (data.hi != null) {
                message.hi = data.hi;
            }
            return message;
        }
        toObject() {
            const data: {
                lo?: string;
                hi?: string;
            } = {};
            if (this.lo != null) {
                data.lo = this.lo;
            }
            if (this.hi != null) {
                data.hi = this.hi;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.lo != "0")
                writer.writeUint64String(1, this.lo);
            if (this.hi != "0")
                writer.writeUint64String(2, this.hi);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): uint128 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new uint128();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.lo = reader.readUint64String();
                        break;
                    case 2:
                        message.hi = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): uint128 {
            return uint128.deserialize(bytes);
        }
    }
    export class AlkaneId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: uint128;
            tx?: uint128;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("tx" in data && data.tx != undefined) {
                    this.tx = data.tx;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, uint128, 1) as uint128;
        }
        set block(value: uint128) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tx() {
            return pb_1.Message.getWrapperField(this, uint128, 2) as uint128;
        }
        set tx(value: uint128) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_tx() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            block?: ReturnType<typeof uint128.prototype.toObject>;
            tx?: ReturnType<typeof uint128.prototype.toObject>;
        }): AlkaneId {
            const message = new AlkaneId({});
            if (data.block != null) {
                message.block = uint128.fromObject(data.block);
            }
            if (data.tx != null) {
                message.tx = uint128.fromObject(data.tx);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof uint128.prototype.toObject>;
                tx?: ReturnType<typeof uint128.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.tx != null) {
                data.tx = this.tx.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (this.has_tx)
                writer.writeMessage(2, this.tx, () => this.tx.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkaneId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkaneId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = uint128.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.tx, () => message.tx = uint128.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkaneId {
            return AlkaneId.deserialize(bytes);
        }
    }
    export class AlkaneTransfer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: AlkaneId;
            value?: uint128;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get id() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 1) as AlkaneId;
        }
        set id(value: AlkaneId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value() {
            return pb_1.Message.getWrapperField(this, uint128, 2) as uint128;
        }
        set value(value: uint128) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            id?: ReturnType<typeof AlkaneId.prototype.toObject>;
            value?: ReturnType<typeof uint128.prototype.toObject>;
        }): AlkaneTransfer {
            const message = new AlkaneTransfer({});
            if (data.id != null) {
                message.id = AlkaneId.fromObject(data.id);
            }
            if (data.value != null) {
                message.value = uint128.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: ReturnType<typeof AlkaneId.prototype.toObject>;
                value?: ReturnType<typeof uint128.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id.toObject();
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id)
                writer.writeMessage(1, this.id, () => this.id.serialize(writer));
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkaneTransfer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkaneTransfer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.id, () => message.id = AlkaneId.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = uint128.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkaneTransfer {
            return AlkaneTransfer.deserialize(bytes);
        }
    }
    export class MessageContextParcel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            alkanes?: AlkaneTransfer[];
            transaction?: Uint8Array;
            block?: Uint8Array;
            height?: number;
            txindex?: number;
            calldata?: Uint8Array;
            vout?: number;
            pointer?: number;
            refund_pointer?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alkanes" in data && data.alkanes != undefined) {
                    this.alkanes = data.alkanes;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("txindex" in data && data.txindex != undefined) {
                    this.txindex = data.txindex;
                }
                if ("calldata" in data && data.calldata != undefined) {
                    this.calldata = data.calldata;
                }
                if ("vout" in data && data.vout != undefined) {
                    this.vout = data.vout;
                }
                if ("pointer" in data && data.pointer != undefined) {
                    this.pointer = data.pointer;
                }
                if ("refund_pointer" in data && data.refund_pointer != undefined) {
                    this.refund_pointer = data.refund_pointer;
                }
            }
        }
        get alkanes() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkaneTransfer, 1) as AlkaneTransfer[];
        }
        set alkanes(value: AlkaneTransfer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get transaction() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set transaction(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get block() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set block(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get txindex() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set txindex(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get calldata() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set calldata(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get vout() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set vout(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get pointer() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set pointer(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get refund_pointer() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set refund_pointer(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
            transaction?: Uint8Array;
            block?: Uint8Array;
            height?: number;
            txindex?: number;
            calldata?: Uint8Array;
            vout?: number;
            pointer?: number;
            refund_pointer?: number;
        }): MessageContextParcel {
            const message = new MessageContextParcel({});
            if (data.alkanes != null) {
                message.alkanes = data.alkanes.map(item => AlkaneTransfer.fromObject(item));
            }
            if (data.transaction != null) {
                message.transaction = data.transaction;
            }
            if (data.block != null) {
                message.block = data.block;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.txindex != null) {
                message.txindex = data.txindex;
            }
            if (data.calldata != null) {
                message.calldata = data.calldata;
            }
            if (data.vout != null) {
                message.vout = data.vout;
            }
            if (data.pointer != null) {
                message.pointer = data.pointer;
            }
            if (data.refund_pointer != null) {
                message.refund_pointer = data.refund_pointer;
            }
            return message;
        }
        toObject() {
            const data: {
                alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
                transaction?: Uint8Array;
                block?: Uint8Array;
                height?: number;
                txindex?: number;
                calldata?: Uint8Array;
                vout?: number;
                pointer?: number;
                refund_pointer?: number;
            } = {};
            if (this.alkanes != null) {
                data.alkanes = this.alkanes.map((item: AlkaneTransfer) => item.toObject());
            }
            if (this.transaction != null) {
                data.transaction = this.transaction;
            }
            if (this.block != null) {
                data.block = this.block;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.txindex != null) {
                data.txindex = this.txindex;
            }
            if (this.calldata != null) {
                data.calldata = this.calldata;
            }
            if (this.vout != null) {
                data.vout = this.vout;
            }
            if (this.pointer != null) {
                data.pointer = this.pointer;
            }
            if (this.refund_pointer != null) {
                data.refund_pointer = this.refund_pointer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alkanes.length)
                writer.writeRepeatedMessage(1, this.alkanes, (item: AlkaneTransfer) => item.serialize(writer));
            if (this.transaction.length)
                writer.writeBytes(2, this.transaction);
            if (this.block.length)
                writer.writeBytes(3, this.block);
            if (this.height != 0)
                writer.writeUint64(4, this.height);
            if (this.txindex != 0)
                writer.writeUint32(6, this.txindex);
            if (this.calldata.length)
                writer.writeBytes(5, this.calldata);
            if (this.vout != 0)
                writer.writeUint32(7, this.vout);
            if (this.pointer != 0)
                writer.writeUint32(8, this.pointer);
            if (this.refund_pointer != 0)
                writer.writeUint32(9, this.refund_pointer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageContextParcel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageContextParcel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.alkanes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkaneTransfer.deserialize(reader), AlkaneTransfer));
                        break;
                    case 2:
                        message.transaction = reader.readBytes();
                        break;
                    case 3:
                        message.block = reader.readBytes();
                        break;
                    case 4:
                        message.height = reader.readUint64();
                        break;
                    case 6:
                        message.txindex = reader.readUint32();
                        break;
                    case 5:
                        message.calldata = reader.readBytes();
                        break;
                    case 7:
                        message.vout = reader.readUint32();
                        break;
                    case 8:
                        message.pointer = reader.readUint32();
                        break;
                    case 9:
                        message.refund_pointer = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageContextParcel {
            return MessageContextParcel.deserialize(bytes);
        }
    }
    export class KeyValuePair extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: Uint8Array;
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: Uint8Array;
            value?: Uint8Array;
        }): KeyValuePair {
            const message = new KeyValuePair({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: Uint8Array;
                value?: Uint8Array;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeBytes(1, this.key);
            if (this.value.length)
                writer.writeBytes(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyValuePair {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyValuePair();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readBytes();
                        break;
                    case 2:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeyValuePair {
            return KeyValuePair.deserialize(bytes);
        }
    }
    export class ExtendedCallResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            alkanes?: AlkaneTransfer[];
            storage?: KeyValuePair[];
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alkanes" in data && data.alkanes != undefined) {
                    this.alkanes = data.alkanes;
                }
                if ("storage" in data && data.storage != undefined) {
                    this.storage = data.storage;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get alkanes() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkaneTransfer, 1) as AlkaneTransfer[];
        }
        set alkanes(value: AlkaneTransfer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get storage() {
            return pb_1.Message.getRepeatedWrapperField(this, KeyValuePair, 2) as KeyValuePair[];
        }
        set storage(value: KeyValuePair[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
            storage?: ReturnType<typeof KeyValuePair.prototype.toObject>[];
            data?: Uint8Array;
        }): ExtendedCallResponse {
            const message = new ExtendedCallResponse({});
            if (data.alkanes != null) {
                message.alkanes = data.alkanes.map(item => AlkaneTransfer.fromObject(item));
            }
            if (data.storage != null) {
                message.storage = data.storage.map(item => KeyValuePair.fromObject(item));
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
                storage?: ReturnType<typeof KeyValuePair.prototype.toObject>[];
                data?: Uint8Array;
            } = {};
            if (this.alkanes != null) {
                data.alkanes = this.alkanes.map((item: AlkaneTransfer) => item.toObject());
            }
            if (this.storage != null) {
                data.storage = this.storage.map((item: KeyValuePair) => item.toObject());
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alkanes.length)
                writer.writeRepeatedMessage(1, this.alkanes, (item: AlkaneTransfer) => item.serialize(writer));
            if (this.storage.length)
                writer.writeRepeatedMessage(2, this.storage, (item: KeyValuePair) => item.serialize(writer));
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtendedCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtendedCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.alkanes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkaneTransfer.deserialize(reader), AlkaneTransfer));
                        break;
                    case 2:
                        reader.readMessage(message.storage, () => pb_1.Message.addToRepeatedWrapperField(message, 2, KeyValuePair.deserialize(reader), KeyValuePair));
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExtendedCallResponse {
            return ExtendedCallResponse.deserialize(bytes);
        }
    }
    export class Context extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            myself?: AlkaneId;
            caller?: AlkaneId;
            inputs?: uint128[];
            vout?: number;
            incoming_alkanes?: AlkaneTransfer[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("myself" in data && data.myself != undefined) {
                    this.myself = data.myself;
                }
                if ("caller" in data && data.caller != undefined) {
                    this.caller = data.caller;
                }
                if ("inputs" in data && data.inputs != undefined) {
                    this.inputs = data.inputs;
                }
                if ("vout" in data && data.vout != undefined) {
                    this.vout = data.vout;
                }
                if ("incoming_alkanes" in data && data.incoming_alkanes != undefined) {
                    this.incoming_alkanes = data.incoming_alkanes;
                }
            }
        }
        get myself() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 1) as AlkaneId;
        }
        set myself(value: AlkaneId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_myself() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get caller() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 2) as AlkaneId;
        }
        set caller(value: AlkaneId) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_caller() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get inputs() {
            return pb_1.Message.getRepeatedWrapperField(this, uint128, 3) as uint128[];
        }
        set inputs(value: uint128[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get vout() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set vout(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get incoming_alkanes() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkaneTransfer, 5) as AlkaneTransfer[];
        }
        set incoming_alkanes(value: AlkaneTransfer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            myself?: ReturnType<typeof AlkaneId.prototype.toObject>;
            caller?: ReturnType<typeof AlkaneId.prototype.toObject>;
            inputs?: ReturnType<typeof uint128.prototype.toObject>[];
            vout?: number;
            incoming_alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
        }): Context {
            const message = new Context({});
            if (data.myself != null) {
                message.myself = AlkaneId.fromObject(data.myself);
            }
            if (data.caller != null) {
                message.caller = AlkaneId.fromObject(data.caller);
            }
            if (data.inputs != null) {
                message.inputs = data.inputs.map(item => uint128.fromObject(item));
            }
            if (data.vout != null) {
                message.vout = data.vout;
            }
            if (data.incoming_alkanes != null) {
                message.incoming_alkanes = data.incoming_alkanes.map(item => AlkaneTransfer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                myself?: ReturnType<typeof AlkaneId.prototype.toObject>;
                caller?: ReturnType<typeof AlkaneId.prototype.toObject>;
                inputs?: ReturnType<typeof uint128.prototype.toObject>[];
                vout?: number;
                incoming_alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
            } = {};
            if (this.myself != null) {
                data.myself = this.myself.toObject();
            }
            if (this.caller != null) {
                data.caller = this.caller.toObject();
            }
            if (this.inputs != null) {
                data.inputs = this.inputs.map((item: uint128) => item.toObject());
            }
            if (this.vout != null) {
                data.vout = this.vout;
            }
            if (this.incoming_alkanes != null) {
                data.incoming_alkanes = this.incoming_alkanes.map((item: AlkaneTransfer) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_myself)
                writer.writeMessage(1, this.myself, () => this.myself.serialize(writer));
            if (this.has_caller)
                writer.writeMessage(2, this.caller, () => this.caller.serialize(writer));
            if (this.inputs.length)
                writer.writeRepeatedMessage(3, this.inputs, (item: uint128) => item.serialize(writer));
            if (this.vout != 0)
                writer.writeUint32(4, this.vout);
            if (this.incoming_alkanes.length)
                writer.writeRepeatedMessage(5, this.incoming_alkanes, (item: AlkaneTransfer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Context {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Context();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.myself, () => message.myself = AlkaneId.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.caller, () => message.caller = AlkaneId.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.inputs, () => pb_1.Message.addToRepeatedWrapperField(message, 3, uint128.deserialize(reader), uint128));
                        break;
                    case 4:
                        message.vout = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.incoming_alkanes, () => pb_1.Message.addToRepeatedWrapperField(message, 5, AlkaneTransfer.deserialize(reader), AlkaneTransfer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Context {
            return Context.deserialize(bytes);
        }
    }
    export class TraceContext extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inner?: Context;
            fuel?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inner" in data && data.inner != undefined) {
                    this.inner = data.inner;
                }
                if ("fuel" in data && data.fuel != undefined) {
                    this.fuel = data.fuel;
                }
            }
        }
        get inner() {
            return pb_1.Message.getWrapperField(this, Context, 1) as Context;
        }
        set inner(value: Context) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_inner() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get fuel() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fuel(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            inner?: ReturnType<typeof Context.prototype.toObject>;
            fuel?: number;
        }): TraceContext {
            const message = new TraceContext({});
            if (data.inner != null) {
                message.inner = Context.fromObject(data.inner);
            }
            if (data.fuel != null) {
                message.fuel = data.fuel;
            }
            return message;
        }
        toObject() {
            const data: {
                inner?: ReturnType<typeof Context.prototype.toObject>;
                fuel?: number;
            } = {};
            if (this.inner != null) {
                data.inner = this.inner.toObject();
            }
            if (this.fuel != null) {
                data.fuel = this.fuel;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_inner)
                writer.writeMessage(1, this.inner, () => this.inner.serialize(writer));
            if (this.fuel != 0)
                writer.writeUint64(2, this.fuel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TraceContext {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TraceContext();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inner, () => message.inner = Context.deserialize(reader));
                        break;
                    case 2:
                        message.fuel = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TraceContext {
            return TraceContext.deserialize(bytes);
        }
    }
    export class AlkanesEnterContext extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            call_type?: AlkanesTraceCallType;
            context?: TraceContext;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("call_type" in data && data.call_type != undefined) {
                    this.call_type = data.call_type;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get call_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AlkanesTraceCallType.NONE) as AlkanesTraceCallType;
        }
        set call_type(value: AlkanesTraceCallType) {
            pb_1.Message.setField(this, 1, value);
        }
        get context() {
            return pb_1.Message.getWrapperField(this, TraceContext, 2) as TraceContext;
        }
        set context(value: TraceContext) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_context() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            call_type?: AlkanesTraceCallType;
            context?: ReturnType<typeof TraceContext.prototype.toObject>;
        }): AlkanesEnterContext {
            const message = new AlkanesEnterContext({});
            if (data.call_type != null) {
                message.call_type = data.call_type;
            }
            if (data.context != null) {
                message.context = TraceContext.fromObject(data.context);
            }
            return message;
        }
        toObject() {
            const data: {
                call_type?: AlkanesTraceCallType;
                context?: ReturnType<typeof TraceContext.prototype.toObject>;
            } = {};
            if (this.call_type != null) {
                data.call_type = this.call_type;
            }
            if (this.context != null) {
                data.context = this.context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.call_type != AlkanesTraceCallType.NONE)
                writer.writeEnum(1, this.call_type);
            if (this.has_context)
                writer.writeMessage(2, this.context, () => this.context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesEnterContext {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesEnterContext();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.call_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.context, () => message.context = TraceContext.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkanesEnterContext {
            return AlkanesEnterContext.deserialize(bytes);
        }
    }
    export class AlkanesExitContext extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: AlkanesTraceStatusFlag;
            response?: ExtendedCallResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, AlkanesTraceStatusFlag.SUCCESS) as AlkanesTraceStatusFlag;
        }
        set status(value: AlkanesTraceStatusFlag) {
            pb_1.Message.setField(this, 1, value);
        }
        get response() {
            return pb_1.Message.getWrapperField(this, ExtendedCallResponse, 2) as ExtendedCallResponse;
        }
        set response(value: ExtendedCallResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            status?: AlkanesTraceStatusFlag;
            response?: ReturnType<typeof ExtendedCallResponse.prototype.toObject>;
        }): AlkanesExitContext {
            const message = new AlkanesExitContext({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.response != null) {
                message.response = ExtendedCallResponse.fromObject(data.response);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: AlkanesTraceStatusFlag;
                response?: ReturnType<typeof ExtendedCallResponse.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != AlkanesTraceStatusFlag.SUCCESS)
                writer.writeEnum(1, this.status);
            if (this.has_response)
                writer.writeMessage(2, this.response, () => this.response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesExitContext {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesExitContext();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.response, () => message.response = ExtendedCallResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkanesExitContext {
            return AlkanesExitContext.deserialize(bytes);
        }
    }
    export class AlkanesCreate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            new_alkane?: AlkaneId;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_alkane" in data && data.new_alkane != undefined) {
                    this.new_alkane = data.new_alkane;
                }
            }
        }
        get new_alkane() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 1) as AlkaneId;
        }
        set new_alkane(value: AlkaneId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_new_alkane() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            new_alkane?: ReturnType<typeof AlkaneId.prototype.toObject>;
        }): AlkanesCreate {
            const message = new AlkanesCreate({});
            if (data.new_alkane != null) {
                message.new_alkane = AlkaneId.fromObject(data.new_alkane);
            }
            return message;
        }
        toObject() {
            const data: {
                new_alkane?: ReturnType<typeof AlkaneId.prototype.toObject>;
            } = {};
            if (this.new_alkane != null) {
                data.new_alkane = this.new_alkane.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_alkane)
                writer.writeMessage(1, this.new_alkane, () => this.new_alkane.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesCreate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesCreate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_alkane, () => message.new_alkane = AlkaneId.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkanesCreate {
            return AlkanesCreate.deserialize(bytes);
        }
    }
    export class AlkanesTraceEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            enter_context?: AlkanesEnterContext;
            exit_context?: never;
            create_alkane?: never;
        } | {
            enter_context?: never;
            exit_context?: AlkanesExitContext;
            create_alkane?: never;
        } | {
            enter_context?: never;
            exit_context?: never;
            create_alkane?: AlkanesCreate;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enter_context" in data && data.enter_context != undefined) {
                    this.enter_context = data.enter_context;
                }
                if ("exit_context" in data && data.exit_context != undefined) {
                    this.exit_context = data.exit_context;
                }
                if ("create_alkane" in data && data.create_alkane != undefined) {
                    this.create_alkane = data.create_alkane;
                }
            }
        }
        get enter_context() {
            return pb_1.Message.getWrapperField(this, AlkanesEnterContext, 1) as AlkanesEnterContext;
        }
        set enter_context(value: AlkanesEnterContext) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_enter_context() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get exit_context() {
            return pb_1.Message.getWrapperField(this, AlkanesExitContext, 2) as AlkanesExitContext;
        }
        set exit_context(value: AlkanesExitContext) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_exit_context() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get create_alkane() {
            return pb_1.Message.getWrapperField(this, AlkanesCreate, 3) as AlkanesCreate;
        }
        set create_alkane(value: AlkanesCreate) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_create_alkane() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get event() {
            const cases: {
                [index: number]: "none" | "enter_context" | "exit_context" | "create_alkane";
            } = {
                0: "none",
                1: "enter_context",
                2: "exit_context",
                3: "create_alkane"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            enter_context?: ReturnType<typeof AlkanesEnterContext.prototype.toObject>;
            exit_context?: ReturnType<typeof AlkanesExitContext.prototype.toObject>;
            create_alkane?: ReturnType<typeof AlkanesCreate.prototype.toObject>;
        }): AlkanesTraceEvent {
            const message = new AlkanesTraceEvent({});
            if (data.enter_context != null) {
                message.enter_context = AlkanesEnterContext.fromObject(data.enter_context);
            }
            if (data.exit_context != null) {
                message.exit_context = AlkanesExitContext.fromObject(data.exit_context);
            }
            if (data.create_alkane != null) {
                message.create_alkane = AlkanesCreate.fromObject(data.create_alkane);
            }
            return message;
        }
        toObject() {
            const data: {
                enter_context?: ReturnType<typeof AlkanesEnterContext.prototype.toObject>;
                exit_context?: ReturnType<typeof AlkanesExitContext.prototype.toObject>;
                create_alkane?: ReturnType<typeof AlkanesCreate.prototype.toObject>;
            } = {};
            if (this.enter_context != null) {
                data.enter_context = this.enter_context.toObject();
            }
            if (this.exit_context != null) {
                data.exit_context = this.exit_context.toObject();
            }
            if (this.create_alkane != null) {
                data.create_alkane = this.create_alkane.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_enter_context)
                writer.writeMessage(1, this.enter_context, () => this.enter_context.serialize(writer));
            if (this.has_exit_context)
                writer.writeMessage(2, this.exit_context, () => this.exit_context.serialize(writer));
            if (this.has_create_alkane)
                writer.writeMessage(3, this.create_alkane, () => this.create_alkane.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesTraceEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesTraceEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.enter_context, () => message.enter_context = AlkanesEnterContext.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.exit_context, () => message.exit_context = AlkanesExitContext.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.create_alkane, () => message.create_alkane = AlkanesCreate.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkanesTraceEvent {
            return AlkanesTraceEvent.deserialize(bytes);
        }
    }
    export class AlkanesBlockEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            traces?: AlkanesTrace;
            outpoint?: Outpoint;
            txindex?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("traces" in data && data.traces != undefined) {
                    this.traces = data.traces;
                }
                if ("outpoint" in data && data.outpoint != undefined) {
                    this.outpoint = data.outpoint;
                }
                if ("txindex" in data && data.txindex != undefined) {
                    this.txindex = data.txindex;
                }
            }
        }
        get traces() {
            return pb_1.Message.getWrapperField(this, AlkanesTrace, 1) as AlkanesTrace;
        }
        set traces(value: AlkanesTrace) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_traces() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get outpoint() {
            return pb_1.Message.getWrapperField(this, Outpoint, 2) as Outpoint;
        }
        set outpoint(value: Outpoint) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_outpoint() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get txindex() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set txindex(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            traces?: ReturnType<typeof AlkanesTrace.prototype.toObject>;
            outpoint?: ReturnType<typeof Outpoint.prototype.toObject>;
            txindex?: number;
        }): AlkanesBlockEvent {
            const message = new AlkanesBlockEvent({});
            if (data.traces != null) {
                message.traces = AlkanesTrace.fromObject(data.traces);
            }
            if (data.outpoint != null) {
                message.outpoint = Outpoint.fromObject(data.outpoint);
            }
            if (data.txindex != null) {
                message.txindex = data.txindex;
            }
            return message;
        }
        toObject() {
            const data: {
                traces?: ReturnType<typeof AlkanesTrace.prototype.toObject>;
                outpoint?: ReturnType<typeof Outpoint.prototype.toObject>;
                txindex?: number;
            } = {};
            if (this.traces != null) {
                data.traces = this.traces.toObject();
            }
            if (this.outpoint != null) {
                data.outpoint = this.outpoint.toObject();
            }
            if (this.txindex != null) {
                data.txindex = this.txindex;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_traces)
                writer.writeMessage(1, this.traces, () => this.traces.serialize(writer));
            if (this.has_outpoint)
                writer.writeMessage(2, this.outpoint, () => this.outpoint.serialize(writer));
            if (this.txindex != 0)
                writer.writeUint64(3, this.txindex);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesBlockEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesBlockEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.traces, () => message.traces = AlkanesTrace.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.outpoint, () => message.outpoint = Outpoint.deserialize(reader));
                        break;
                    case 3:
                        message.txindex = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkanesBlockEvent {
            return AlkanesBlockEvent.deserialize(bytes);
        }
    }
    export class AlkanesBlockTraceEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: AlkanesBlockEvent[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkanesBlockEvent, 1) as AlkanesBlockEvent[];
        }
        set events(value: AlkanesBlockEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            events?: ReturnType<typeof AlkanesBlockEvent.prototype.toObject>[];
        }): AlkanesBlockTraceEvent {
            const message = new AlkanesBlockTraceEvent({});
            if (data.events != null) {
                message.events = data.events.map(item => AlkanesBlockEvent.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                events?: ReturnType<typeof AlkanesBlockEvent.prototype.toObject>[];
            } = {};
            if (this.events != null) {
                data.events = this.events.map((item: AlkanesBlockEvent) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item: AlkanesBlockEvent) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesBlockTraceEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesBlockTraceEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkanesBlockEvent.deserialize(reader), AlkanesBlockEvent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkanesBlockTraceEvent {
            return AlkanesBlockTraceEvent.deserialize(bytes);
        }
    }
    export class AlkanesTrace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: AlkanesTraceEvent[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkanesTraceEvent, 1) as AlkanesTraceEvent[];
        }
        set events(value: AlkanesTraceEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            events?: ReturnType<typeof AlkanesTraceEvent.prototype.toObject>[];
        }): AlkanesTrace {
            const message = new AlkanesTrace({});
            if (data.events != null) {
                message.events = data.events.map(item => AlkanesTraceEvent.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                events?: ReturnType<typeof AlkanesTraceEvent.prototype.toObject>[];
            } = {};
            if (this.events != null) {
                data.events = this.events.map((item: AlkanesTraceEvent) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item: AlkanesTraceEvent) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesTrace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkanesTrace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkanesTraceEvent.deserialize(reader), AlkanesTraceEvent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkanesTrace {
            return AlkanesTrace.deserialize(bytes);
        }
    }
    export class SimulateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            execution?: ExtendedCallResponse;
            gas_used?: number;
            error?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("execution" in data && data.execution != undefined) {
                    this.execution = data.execution;
                }
                if ("gas_used" in data && data.gas_used != undefined) {
                    this.gas_used = data.gas_used;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get execution() {
            return pb_1.Message.getWrapperField(this, ExtendedCallResponse, 1) as ExtendedCallResponse;
        }
        set execution(value: ExtendedCallResponse) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_execution() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get gas_used() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set gas_used(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            execution?: ReturnType<typeof ExtendedCallResponse.prototype.toObject>;
            gas_used?: number;
            error?: string;
        }): SimulateResponse {
            const message = new SimulateResponse({});
            if (data.execution != null) {
                message.execution = ExtendedCallResponse.fromObject(data.execution);
            }
            if (data.gas_used != null) {
                message.gas_used = data.gas_used;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                execution?: ReturnType<typeof ExtendedCallResponse.prototype.toObject>;
                gas_used?: number;
                error?: string;
            } = {};
            if (this.execution != null) {
                data.execution = this.execution.toObject();
            }
            if (this.gas_used != null) {
                data.gas_used = this.gas_used;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_execution)
                writer.writeMessage(1, this.execution, () => this.execution.serialize(writer));
            if (this.gas_used != 0)
                writer.writeUint64(2, this.gas_used);
            if (this.error.length)
                writer.writeString(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimulateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimulateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.execution, () => message.execution = ExtendedCallResponse.deserialize(reader));
                        break;
                    case 2:
                        message.gas_used = reader.readUint64();
                        break;
                    case 3:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimulateResponse {
            return SimulateResponse.deserialize(bytes);
        }
    }
    export class AlkaneInventoryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: AlkaneId;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getWrapperField(this, AlkaneId, 1) as AlkaneId;
        }
        set id(value: AlkaneId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            id?: ReturnType<typeof AlkaneId.prototype.toObject>;
        }): AlkaneInventoryRequest {
            const message = new AlkaneInventoryRequest({});
            if (data.id != null) {
                message.id = AlkaneId.fromObject(data.id);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: ReturnType<typeof AlkaneId.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id)
                writer.writeMessage(1, this.id, () => this.id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkaneInventoryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkaneInventoryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.id, () => message.id = AlkaneId.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkaneInventoryRequest {
            return AlkaneInventoryRequest.deserialize(bytes);
        }
    }
    export class AlkaneInventoryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            alkanes?: AlkaneTransfer[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alkanes" in data && data.alkanes != undefined) {
                    this.alkanes = data.alkanes;
                }
            }
        }
        get alkanes() {
            return pb_1.Message.getRepeatedWrapperField(this, AlkaneTransfer, 1) as AlkaneTransfer[];
        }
        set alkanes(value: AlkaneTransfer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
        }): AlkaneInventoryResponse {
            const message = new AlkaneInventoryResponse({});
            if (data.alkanes != null) {
                message.alkanes = data.alkanes.map(item => AlkaneTransfer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
            } = {};
            if (this.alkanes != null) {
                data.alkanes = this.alkanes.map((item: AlkaneTransfer) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alkanes.length)
                writer.writeRepeatedMessage(1, this.alkanes, (item: AlkaneTransfer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkaneInventoryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlkaneInventoryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.alkanes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AlkaneTransfer.deserialize(reader), AlkaneTransfer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlkaneInventoryResponse {
            return AlkaneInventoryResponse.deserialize(bytes);
        }
    }
    export class Outpoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txid?: Uint8Array;
            vout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txid" in data && data.txid != undefined) {
                    this.txid = data.txid;
                }
                if ("vout" in data && data.vout != undefined) {
                    this.vout = data.vout;
                }
            }
        }
        get txid() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set txid(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get vout() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set vout(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            txid?: Uint8Array;
            vout?: number;
        }): Outpoint {
            const message = new Outpoint({});
            if (data.txid != null) {
                message.txid = data.txid;
            }
            if (data.vout != null) {
                message.vout = data.vout;
            }
            return message;
        }
        toObject() {
            const data: {
                txid?: Uint8Array;
                vout?: number;
            } = {};
            if (this.txid != null) {
                data.txid = this.txid;
            }
            if (this.vout != null) {
                data.vout = this.vout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txid.length)
                writer.writeBytes(1, this.txid);
            if (this.vout != 0)
                writer.writeUint32(2, this.vout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Outpoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Outpoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.txid = reader.readBytes();
                        break;
                    case 2:
                        message.vout = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Outpoint {
            return Outpoint.deserialize(bytes);
        }
    }
    export class Trace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            outpoint?: Outpoint;
            trace?: AlkanesTrace;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("outpoint" in data && data.outpoint != undefined) {
                    this.outpoint = data.outpoint;
                }
                if ("trace" in data && data.trace != undefined) {
                    this.trace = data.trace;
                }
            }
        }
        get outpoint() {
            return pb_1.Message.getWrapperField(this, Outpoint, 1) as Outpoint;
        }
        set outpoint(value: Outpoint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_outpoint() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get trace() {
            return pb_1.Message.getWrapperField(this, AlkanesTrace, 2) as AlkanesTrace;
        }
        set trace(value: AlkanesTrace) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_trace() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            outpoint?: ReturnType<typeof Outpoint.prototype.toObject>;
            trace?: ReturnType<typeof AlkanesTrace.prototype.toObject>;
        }): Trace {
            const message = new Trace({});
            if (data.outpoint != null) {
                message.outpoint = Outpoint.fromObject(data.outpoint);
            }
            if (data.trace != null) {
                message.trace = AlkanesTrace.fromObject(data.trace);
            }
            return message;
        }
        toObject() {
            const data: {
                outpoint?: ReturnType<typeof Outpoint.prototype.toObject>;
                trace?: ReturnType<typeof AlkanesTrace.prototype.toObject>;
            } = {};
            if (this.outpoint != null) {
                data.outpoint = this.outpoint.toObject();
            }
            if (this.trace != null) {
                data.trace = this.trace.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_outpoint)
                writer.writeMessage(1, this.outpoint, () => this.outpoint.serialize(writer));
            if (this.has_trace)
                writer.writeMessage(2, this.trace, () => this.trace.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Trace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Trace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.outpoint, () => message.outpoint = Outpoint.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.trace, () => message.trace = AlkanesTrace.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Trace {
            return Trace.deserialize(bytes);
        }
    }
    export class TraceBlockRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            block?: number;
        }): TraceBlockRequest {
            const message = new TraceBlockRequest({});
            if (data.block != null) {
                message.block = data.block;
            }
            return message;
        }
        toObject() {
            const data: {
                block?: number;
            } = {};
            if (this.block != null) {
                data.block = this.block;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block != 0)
                writer.writeUint64(1, this.block);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TraceBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TraceBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TraceBlockRequest {
            return TraceBlockRequest.deserialize(bytes);
        }
    }
    export class TraceBlockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            traces?: Trace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("traces" in data && data.traces != undefined) {
                    this.traces = data.traces;
                }
            }
        }
        get traces() {
            return pb_1.Message.getRepeatedWrapperField(this, Trace, 1) as Trace[];
        }
        set traces(value: Trace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            traces?: ReturnType<typeof Trace.prototype.toObject>[];
        }): TraceBlockResponse {
            const message = new TraceBlockResponse({});
            if (data.traces != null) {
                message.traces = data.traces.map(item => Trace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                traces?: ReturnType<typeof Trace.prototype.toObject>[];
            } = {};
            if (this.traces != null) {
                data.traces = this.traces.map((item: Trace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.traces.length)
                writer.writeRepeatedMessage(1, this.traces, (item: Trace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TraceBlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TraceBlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.traces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Trace.deserialize(reader), Trace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TraceBlockResponse {
            return TraceBlockResponse.deserialize(bytes);
        }
    }
}
