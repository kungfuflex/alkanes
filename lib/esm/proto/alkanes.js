"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: alkanes.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PendingUnwrapsResponse = exports.Payment = exports.PendingUnwrapsRequest = exports.BlockResponse = exports.BlockRequest = exports.BytecodeRequest = exports.TraceBlockResponse = exports.TraceBlockRequest = exports.Trace = exports.Outpoint = exports.AlkaneIdToOutpointResponse = exports.AlkaneStorageResponse = exports.AlkaneStorageRequest = exports.AlkaneInventoryResponse = exports.AlkaneIdToOutpointRequest = exports.AlkaneInventoryRequest = exports.MultiSimulateResponse = exports.SimulateResponse = exports.AlkanesTrace = exports.AlkanesBlockTraceEvent = exports.AlkanesBlockEvent = exports.AlkanesTraceEvent = exports.AlkanesCreate = exports.AlkanesExitContext = exports.AlkanesEnterContext = exports.TraceContext = exports.Context = exports.ExtendedCallResponse = exports.KeyValuePair = exports.MessageContextParcel = exports.MultiSimulateRequest = exports.AlkaneTransfer = exports.AlkaneId = exports.uint128 = exports.AlkanesTraceStatusFlag = exports.AlkanesTraceCallType = exports.protobufPackage = void 0;
exports.alkanesTraceCallTypeFromJSON = alkanesTraceCallTypeFromJSON;
exports.alkanesTraceCallTypeToJSON = alkanesTraceCallTypeToJSON;
exports.alkanesTraceStatusFlagFromJSON = alkanesTraceStatusFlagFromJSON;
exports.alkanesTraceStatusFlagToJSON = alkanesTraceStatusFlagToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "alkanes";
var AlkanesTraceCallType;
(function (AlkanesTraceCallType) {
    AlkanesTraceCallType[AlkanesTraceCallType["NONE"] = 0] = "NONE";
    AlkanesTraceCallType[AlkanesTraceCallType["CALL"] = 1] = "CALL";
    AlkanesTraceCallType[AlkanesTraceCallType["DELEGATECALL"] = 2] = "DELEGATECALL";
    AlkanesTraceCallType[AlkanesTraceCallType["STATICCALL"] = 3] = "STATICCALL";
    AlkanesTraceCallType[AlkanesTraceCallType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AlkanesTraceCallType || (exports.AlkanesTraceCallType = AlkanesTraceCallType = {}));
function alkanesTraceCallTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return AlkanesTraceCallType.NONE;
        case 1:
        case "CALL":
            return AlkanesTraceCallType.CALL;
        case 2:
        case "DELEGATECALL":
            return AlkanesTraceCallType.DELEGATECALL;
        case 3:
        case "STATICCALL":
            return AlkanesTraceCallType.STATICCALL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AlkanesTraceCallType.UNRECOGNIZED;
    }
}
function alkanesTraceCallTypeToJSON(object) {
    switch (object) {
        case AlkanesTraceCallType.NONE:
            return "NONE";
        case AlkanesTraceCallType.CALL:
            return "CALL";
        case AlkanesTraceCallType.DELEGATECALL:
            return "DELEGATECALL";
        case AlkanesTraceCallType.STATICCALL:
            return "STATICCALL";
        case AlkanesTraceCallType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var AlkanesTraceStatusFlag;
(function (AlkanesTraceStatusFlag) {
    AlkanesTraceStatusFlag[AlkanesTraceStatusFlag["SUCCESS"] = 0] = "SUCCESS";
    AlkanesTraceStatusFlag[AlkanesTraceStatusFlag["FAILURE"] = 1] = "FAILURE";
    AlkanesTraceStatusFlag[AlkanesTraceStatusFlag["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AlkanesTraceStatusFlag || (exports.AlkanesTraceStatusFlag = AlkanesTraceStatusFlag = {}));
function alkanesTraceStatusFlagFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return AlkanesTraceStatusFlag.SUCCESS;
        case 1:
        case "FAILURE":
            return AlkanesTraceStatusFlag.FAILURE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AlkanesTraceStatusFlag.UNRECOGNIZED;
    }
}
function alkanesTraceStatusFlagToJSON(object) {
    switch (object) {
        case AlkanesTraceStatusFlag.SUCCESS:
            return "SUCCESS";
        case AlkanesTraceStatusFlag.FAILURE:
            return "FAILURE";
        case AlkanesTraceStatusFlag.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseuint128() {
    return { lo: 0n, hi: 0n };
}
exports.uint128 = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lo !== 0n) {
            if (BigInt.asUintN(64, message.lo) !== message.lo) {
                throw new globalThis.Error("value provided for field message.lo of type uint64 too large");
            }
            writer.uint32(8).uint64(message.lo);
        }
        if (message.hi !== 0n) {
            if (BigInt.asUintN(64, message.hi) !== message.hi) {
                throw new globalThis.Error("value provided for field message.hi of type uint64 too large");
            }
            writer.uint32(16).uint64(message.hi);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseuint128();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.lo = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.hi = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lo: isSet(object.lo) ? BigInt(object.lo) : 0n, hi: isSet(object.hi) ? BigInt(object.hi) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.lo !== 0n) {
            obj.lo = message.lo.toString();
        }
        if (message.hi !== 0n) {
            obj.hi = message.hi.toString();
        }
        return obj;
    },
    create(base) {
        return exports.uint128.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseuint128();
        message.lo = object.lo ?? 0n;
        message.hi = object.hi ?? 0n;
        return message;
    },
};
function createBaseAlkaneId() {
    return { block: undefined, tx: undefined };
}
exports.AlkaneId = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.block !== undefined) {
            exports.uint128.encode(message.block, writer.uint32(10).fork()).join();
        }
        if (message.tx !== undefined) {
            exports.uint128.encode(message.tx, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkaneId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.block = exports.uint128.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tx = exports.uint128.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            block: isSet(object.block) ? exports.uint128.fromJSON(object.block) : undefined,
            tx: isSet(object.tx) ? exports.uint128.fromJSON(object.tx) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.block !== undefined) {
            obj.block = exports.uint128.toJSON(message.block);
        }
        if (message.tx !== undefined) {
            obj.tx = exports.uint128.toJSON(message.tx);
        }
        return obj;
    },
    create(base) {
        return exports.AlkaneId.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkaneId();
        message.block = (object.block !== undefined && object.block !== null)
            ? exports.uint128.fromPartial(object.block)
            : undefined;
        message.tx = (object.tx !== undefined && object.tx !== null) ? exports.uint128.fromPartial(object.tx) : undefined;
        return message;
    },
};
function createBaseAlkaneTransfer() {
    return { id: undefined, value: undefined };
}
exports.AlkaneTransfer = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            exports.AlkaneId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.value !== undefined) {
            exports.uint128.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkaneTransfer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = exports.AlkaneId.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.uint128.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? exports.AlkaneId.fromJSON(object.id) : undefined,
            value: isSet(object.value) ? exports.uint128.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = exports.AlkaneId.toJSON(message.id);
        }
        if (message.value !== undefined) {
            obj.value = exports.uint128.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.AlkaneTransfer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkaneTransfer();
        message.id = (object.id !== undefined && object.id !== null) ? exports.AlkaneId.fromPartial(object.id) : undefined;
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.uint128.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseMultiSimulateRequest() {
    return { parcels: [] };
}
exports.MultiSimulateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.parcels) {
            exports.MessageContextParcel.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiSimulateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.parcels.push(exports.MessageContextParcel.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            parcels: globalThis.Array.isArray(object?.parcels)
                ? object.parcels.map((e) => exports.MessageContextParcel.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.parcels?.length) {
            obj.parcels = message.parcels.map((e) => exports.MessageContextParcel.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MultiSimulateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMultiSimulateRequest();
        message.parcels = object.parcels?.map((e) => exports.MessageContextParcel.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMessageContextParcel() {
    return {
        alkanes: [],
        transaction: new Uint8Array(0),
        block: new Uint8Array(0),
        height: 0n,
        txindex: 0,
        calldata: new Uint8Array(0),
        vout: 0,
        pointer: 0,
        refundPointer: 0,
    };
}
exports.MessageContextParcel = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.alkanes) {
            exports.AlkaneTransfer.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.transaction.length !== 0) {
            writer.uint32(18).bytes(message.transaction);
        }
        if (message.block.length !== 0) {
            writer.uint32(26).bytes(message.block);
        }
        if (message.height !== 0n) {
            if (BigInt.asUintN(64, message.height) !== message.height) {
                throw new globalThis.Error("value provided for field message.height of type uint64 too large");
            }
            writer.uint32(32).uint64(message.height);
        }
        if (message.txindex !== 0) {
            writer.uint32(48).uint32(message.txindex);
        }
        if (message.calldata.length !== 0) {
            writer.uint32(42).bytes(message.calldata);
        }
        if (message.vout !== 0) {
            writer.uint32(56).uint32(message.vout);
        }
        if (message.pointer !== 0) {
            writer.uint32(64).uint32(message.pointer);
        }
        if (message.refundPointer !== 0) {
            writer.uint32(72).uint32(message.refundPointer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageContextParcel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.alkanes.push(exports.AlkaneTransfer.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.transaction = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.block = reader.bytes();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.height = reader.uint64();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.txindex = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.calldata = reader.bytes();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.vout = reader.uint32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.pointer = reader.uint32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.refundPointer = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alkanes: globalThis.Array.isArray(object?.alkanes)
                ? object.alkanes.map((e) => exports.AlkaneTransfer.fromJSON(e))
                : [],
            transaction: isSet(object.transaction) ? bytesFromBase64(object.transaction) : new Uint8Array(0),
            block: isSet(object.block) ? bytesFromBase64(object.block) : new Uint8Array(0),
            height: isSet(object.height) ? BigInt(object.height) : 0n,
            txindex: isSet(object.txindex) ? globalThis.Number(object.txindex) : 0,
            calldata: isSet(object.calldata) ? bytesFromBase64(object.calldata) : new Uint8Array(0),
            vout: isSet(object.vout) ? globalThis.Number(object.vout) : 0,
            pointer: isSet(object.pointer) ? globalThis.Number(object.pointer) : 0,
            refundPointer: isSet(object.refundPointer) ? globalThis.Number(object.refundPointer) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alkanes?.length) {
            obj.alkanes = message.alkanes.map((e) => exports.AlkaneTransfer.toJSON(e));
        }
        if (message.transaction.length !== 0) {
            obj.transaction = base64FromBytes(message.transaction);
        }
        if (message.block.length !== 0) {
            obj.block = base64FromBytes(message.block);
        }
        if (message.height !== 0n) {
            obj.height = message.height.toString();
        }
        if (message.txindex !== 0) {
            obj.txindex = Math.round(message.txindex);
        }
        if (message.calldata.length !== 0) {
            obj.calldata = base64FromBytes(message.calldata);
        }
        if (message.vout !== 0) {
            obj.vout = Math.round(message.vout);
        }
        if (message.pointer !== 0) {
            obj.pointer = Math.round(message.pointer);
        }
        if (message.refundPointer !== 0) {
            obj.refundPointer = Math.round(message.refundPointer);
        }
        return obj;
    },
    create(base) {
        return exports.MessageContextParcel.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageContextParcel();
        message.alkanes = object.alkanes?.map((e) => exports.AlkaneTransfer.fromPartial(e)) || [];
        message.transaction = object.transaction ?? new Uint8Array(0);
        message.block = object.block ?? new Uint8Array(0);
        message.height = object.height ?? 0n;
        message.txindex = object.txindex ?? 0;
        message.calldata = object.calldata ?? new Uint8Array(0);
        message.vout = object.vout ?? 0;
        message.pointer = object.pointer ?? 0;
        message.refundPointer = object.refundPointer ?? 0;
        return message;
    },
};
function createBaseKeyValuePair() {
    return { key: new Uint8Array(0), value: new Uint8Array(0) };
}
exports.KeyValuePair = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyValuePair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key.length !== 0) {
            obj.key = base64FromBytes(message.key);
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.KeyValuePair.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyValuePair();
        message.key = object.key ?? new Uint8Array(0);
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
function createBaseExtendedCallResponse() {
    return { alkanes: [], storage: [], data: new Uint8Array(0) };
}
exports.ExtendedCallResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.alkanes) {
            exports.AlkaneTransfer.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.storage) {
            exports.KeyValuePair.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.data.length !== 0) {
            writer.uint32(26).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtendedCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.alkanes.push(exports.AlkaneTransfer.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.storage.push(exports.KeyValuePair.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alkanes: globalThis.Array.isArray(object?.alkanes)
                ? object.alkanes.map((e) => exports.AlkaneTransfer.fromJSON(e))
                : [],
            storage: globalThis.Array.isArray(object?.storage)
                ? object.storage.map((e) => exports.KeyValuePair.fromJSON(e))
                : [],
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alkanes?.length) {
            obj.alkanes = message.alkanes.map((e) => exports.AlkaneTransfer.toJSON(e));
        }
        if (message.storage?.length) {
            obj.storage = message.storage.map((e) => exports.KeyValuePair.toJSON(e));
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.ExtendedCallResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExtendedCallResponse();
        message.alkanes = object.alkanes?.map((e) => exports.AlkaneTransfer.fromPartial(e)) || [];
        message.storage = object.storage?.map((e) => exports.KeyValuePair.fromPartial(e)) || [];
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseContext() {
    return { myself: undefined, caller: undefined, inputs: [], vout: 0, incomingAlkanes: [] };
}
exports.Context = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.myself !== undefined) {
            exports.AlkaneId.encode(message.myself, writer.uint32(10).fork()).join();
        }
        if (message.caller !== undefined) {
            exports.AlkaneId.encode(message.caller, writer.uint32(18).fork()).join();
        }
        for (const v of message.inputs) {
            exports.uint128.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.vout !== 0) {
            writer.uint32(32).uint32(message.vout);
        }
        for (const v of message.incomingAlkanes) {
            exports.AlkaneTransfer.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.myself = exports.AlkaneId.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.caller = exports.AlkaneId.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inputs.push(exports.uint128.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.vout = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.incomingAlkanes.push(exports.AlkaneTransfer.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            myself: isSet(object.myself) ? exports.AlkaneId.fromJSON(object.myself) : undefined,
            caller: isSet(object.caller) ? exports.AlkaneId.fromJSON(object.caller) : undefined,
            inputs: globalThis.Array.isArray(object?.inputs) ? object.inputs.map((e) => exports.uint128.fromJSON(e)) : [],
            vout: isSet(object.vout) ? globalThis.Number(object.vout) : 0,
            incomingAlkanes: globalThis.Array.isArray(object?.incomingAlkanes)
                ? object.incomingAlkanes.map((e) => exports.AlkaneTransfer.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.myself !== undefined) {
            obj.myself = exports.AlkaneId.toJSON(message.myself);
        }
        if (message.caller !== undefined) {
            obj.caller = exports.AlkaneId.toJSON(message.caller);
        }
        if (message.inputs?.length) {
            obj.inputs = message.inputs.map((e) => exports.uint128.toJSON(e));
        }
        if (message.vout !== 0) {
            obj.vout = Math.round(message.vout);
        }
        if (message.incomingAlkanes?.length) {
            obj.incomingAlkanes = message.incomingAlkanes.map((e) => exports.AlkaneTransfer.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Context.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseContext();
        message.myself = (object.myself !== undefined && object.myself !== null)
            ? exports.AlkaneId.fromPartial(object.myself)
            : undefined;
        message.caller = (object.caller !== undefined && object.caller !== null)
            ? exports.AlkaneId.fromPartial(object.caller)
            : undefined;
        message.inputs = object.inputs?.map((e) => exports.uint128.fromPartial(e)) || [];
        message.vout = object.vout ?? 0;
        message.incomingAlkanes = object.incomingAlkanes?.map((e) => exports.AlkaneTransfer.fromPartial(e)) || [];
        return message;
    },
};
function createBaseTraceContext() {
    return { inner: undefined, fuel: 0n };
}
exports.TraceContext = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.inner !== undefined) {
            exports.Context.encode(message.inner, writer.uint32(10).fork()).join();
        }
        if (message.fuel !== 0n) {
            if (BigInt.asUintN(64, message.fuel) !== message.fuel) {
                throw new globalThis.Error("value provided for field message.fuel of type uint64 too large");
            }
            writer.uint32(16).uint64(message.fuel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTraceContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inner = exports.Context.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fuel = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inner: isSet(object.inner) ? exports.Context.fromJSON(object.inner) : undefined,
            fuel: isSet(object.fuel) ? BigInt(object.fuel) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.inner !== undefined) {
            obj.inner = exports.Context.toJSON(message.inner);
        }
        if (message.fuel !== 0n) {
            obj.fuel = message.fuel.toString();
        }
        return obj;
    },
    create(base) {
        return exports.TraceContext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTraceContext();
        message.inner = (object.inner !== undefined && object.inner !== null)
            ? exports.Context.fromPartial(object.inner)
            : undefined;
        message.fuel = object.fuel ?? 0n;
        return message;
    },
};
function createBaseAlkanesEnterContext() {
    return { callType: 0, context: undefined };
}
exports.AlkanesEnterContext = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.callType !== 0) {
            writer.uint32(8).int32(message.callType);
        }
        if (message.context !== undefined) {
            exports.TraceContext.encode(message.context, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkanesEnterContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.callType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.context = exports.TraceContext.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            callType: isSet(object.callType) ? alkanesTraceCallTypeFromJSON(object.callType) : 0,
            context: isSet(object.context) ? exports.TraceContext.fromJSON(object.context) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.callType !== 0) {
            obj.callType = alkanesTraceCallTypeToJSON(message.callType);
        }
        if (message.context !== undefined) {
            obj.context = exports.TraceContext.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return exports.AlkanesEnterContext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkanesEnterContext();
        message.callType = object.callType ?? 0;
        message.context = (object.context !== undefined && object.context !== null)
            ? exports.TraceContext.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseAlkanesExitContext() {
    return { status: 0, response: undefined };
}
exports.AlkanesExitContext = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.response !== undefined) {
            exports.ExtendedCallResponse.encode(message.response, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkanesExitContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.ExtendedCallResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? alkanesTraceStatusFlagFromJSON(object.status) : 0,
            response: isSet(object.response) ? exports.ExtendedCallResponse.fromJSON(object.response) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = alkanesTraceStatusFlagToJSON(message.status);
        }
        if (message.response !== undefined) {
            obj.response = exports.ExtendedCallResponse.toJSON(message.response);
        }
        return obj;
    },
    create(base) {
        return exports.AlkanesExitContext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkanesExitContext();
        message.status = object.status ?? 0;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.ExtendedCallResponse.fromPartial(object.response)
            : undefined;
        return message;
    },
};
function createBaseAlkanesCreate() {
    return { newAlkane: undefined };
}
exports.AlkanesCreate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.newAlkane !== undefined) {
            exports.AlkaneId.encode(message.newAlkane, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkanesCreate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.newAlkane = exports.AlkaneId.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newAlkane: isSet(object.newAlkane) ? exports.AlkaneId.fromJSON(object.newAlkane) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.newAlkane !== undefined) {
            obj.newAlkane = exports.AlkaneId.toJSON(message.newAlkane);
        }
        return obj;
    },
    create(base) {
        return exports.AlkanesCreate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkanesCreate();
        message.newAlkane = (object.newAlkane !== undefined && object.newAlkane !== null)
            ? exports.AlkaneId.fromPartial(object.newAlkane)
            : undefined;
        return message;
    },
};
function createBaseAlkanesTraceEvent() {
    return { enterContext: undefined, exitContext: undefined, createAlkane: undefined };
}
exports.AlkanesTraceEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.enterContext !== undefined) {
            exports.AlkanesEnterContext.encode(message.enterContext, writer.uint32(10).fork()).join();
        }
        if (message.exitContext !== undefined) {
            exports.AlkanesExitContext.encode(message.exitContext, writer.uint32(18).fork()).join();
        }
        if (message.createAlkane !== undefined) {
            exports.AlkanesCreate.encode(message.createAlkane, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkanesTraceEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.enterContext = exports.AlkanesEnterContext.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.exitContext = exports.AlkanesExitContext.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.createAlkane = exports.AlkanesCreate.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enterContext: isSet(object.enterContext) ? exports.AlkanesEnterContext.fromJSON(object.enterContext) : undefined,
            exitContext: isSet(object.exitContext) ? exports.AlkanesExitContext.fromJSON(object.exitContext) : undefined,
            createAlkane: isSet(object.createAlkane) ? exports.AlkanesCreate.fromJSON(object.createAlkane) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.enterContext !== undefined) {
            obj.enterContext = exports.AlkanesEnterContext.toJSON(message.enterContext);
        }
        if (message.exitContext !== undefined) {
            obj.exitContext = exports.AlkanesExitContext.toJSON(message.exitContext);
        }
        if (message.createAlkane !== undefined) {
            obj.createAlkane = exports.AlkanesCreate.toJSON(message.createAlkane);
        }
        return obj;
    },
    create(base) {
        return exports.AlkanesTraceEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkanesTraceEvent();
        message.enterContext = (object.enterContext !== undefined && object.enterContext !== null)
            ? exports.AlkanesEnterContext.fromPartial(object.enterContext)
            : undefined;
        message.exitContext = (object.exitContext !== undefined && object.exitContext !== null)
            ? exports.AlkanesExitContext.fromPartial(object.exitContext)
            : undefined;
        message.createAlkane = (object.createAlkane !== undefined && object.createAlkane !== null)
            ? exports.AlkanesCreate.fromPartial(object.createAlkane)
            : undefined;
        return message;
    },
};
function createBaseAlkanesBlockEvent() {
    return { traces: undefined, outpoint: undefined, txindex: 0n };
}
exports.AlkanesBlockEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.traces !== undefined) {
            exports.AlkanesTrace.encode(message.traces, writer.uint32(10).fork()).join();
        }
        if (message.outpoint !== undefined) {
            exports.Outpoint.encode(message.outpoint, writer.uint32(18).fork()).join();
        }
        if (message.txindex !== 0n) {
            if (BigInt.asUintN(64, message.txindex) !== message.txindex) {
                throw new globalThis.Error("value provided for field message.txindex of type uint64 too large");
            }
            writer.uint32(24).uint64(message.txindex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkanesBlockEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.traces = exports.AlkanesTrace.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.outpoint = exports.Outpoint.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.txindex = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            traces: isSet(object.traces) ? exports.AlkanesTrace.fromJSON(object.traces) : undefined,
            outpoint: isSet(object.outpoint) ? exports.Outpoint.fromJSON(object.outpoint) : undefined,
            txindex: isSet(object.txindex) ? BigInt(object.txindex) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.traces !== undefined) {
            obj.traces = exports.AlkanesTrace.toJSON(message.traces);
        }
        if (message.outpoint !== undefined) {
            obj.outpoint = exports.Outpoint.toJSON(message.outpoint);
        }
        if (message.txindex !== 0n) {
            obj.txindex = message.txindex.toString();
        }
        return obj;
    },
    create(base) {
        return exports.AlkanesBlockEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkanesBlockEvent();
        message.traces = (object.traces !== undefined && object.traces !== null)
            ? exports.AlkanesTrace.fromPartial(object.traces)
            : undefined;
        message.outpoint = (object.outpoint !== undefined && object.outpoint !== null)
            ? exports.Outpoint.fromPartial(object.outpoint)
            : undefined;
        message.txindex = object.txindex ?? 0n;
        return message;
    },
};
function createBaseAlkanesBlockTraceEvent() {
    return { events: [] };
}
exports.AlkanesBlockTraceEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.events) {
            exports.AlkanesBlockEvent.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkanesBlockTraceEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(exports.AlkanesBlockEvent.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: globalThis.Array.isArray(object?.events)
                ? object.events.map((e) => exports.AlkanesBlockEvent.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events?.length) {
            obj.events = message.events.map((e) => exports.AlkanesBlockEvent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AlkanesBlockTraceEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkanesBlockTraceEvent();
        message.events = object.events?.map((e) => exports.AlkanesBlockEvent.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAlkanesTrace() {
    return { events: [] };
}
exports.AlkanesTrace = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.events) {
            exports.AlkanesTraceEvent.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkanesTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(exports.AlkanesTraceEvent.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: globalThis.Array.isArray(object?.events)
                ? object.events.map((e) => exports.AlkanesTraceEvent.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events?.length) {
            obj.events = message.events.map((e) => exports.AlkanesTraceEvent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AlkanesTrace.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkanesTrace();
        message.events = object.events?.map((e) => exports.AlkanesTraceEvent.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSimulateResponse() {
    return { execution: undefined, gasUsed: 0n, error: "" };
}
exports.SimulateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.execution !== undefined) {
            exports.ExtendedCallResponse.encode(message.execution, writer.uint32(10).fork()).join();
        }
        if (message.gasUsed !== 0n) {
            if (BigInt.asUintN(64, message.gasUsed) !== message.gasUsed) {
                throw new globalThis.Error("value provided for field message.gasUsed of type uint64 too large");
            }
            writer.uint32(16).uint64(message.gasUsed);
        }
        if (message.error !== "") {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSimulateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.execution = exports.ExtendedCallResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.gasUsed = reader.uint64();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            execution: isSet(object.execution) ? exports.ExtendedCallResponse.fromJSON(object.execution) : undefined,
            gasUsed: isSet(object.gasUsed) ? BigInt(object.gasUsed) : 0n,
            error: isSet(object.error) ? globalThis.String(object.error) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.execution !== undefined) {
            obj.execution = exports.ExtendedCallResponse.toJSON(message.execution);
        }
        if (message.gasUsed !== 0n) {
            obj.gasUsed = message.gasUsed.toString();
        }
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.SimulateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSimulateResponse();
        message.execution = (object.execution !== undefined && object.execution !== null)
            ? exports.ExtendedCallResponse.fromPartial(object.execution)
            : undefined;
        message.gasUsed = object.gasUsed ?? 0n;
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseMultiSimulateResponse() {
    return { responses: [], error: "" };
}
exports.MultiSimulateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.responses) {
            exports.SimulateResponse.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.error !== "") {
            writer.uint32(18).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiSimulateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.responses.push(exports.SimulateResponse.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            responses: globalThis.Array.isArray(object?.responses)
                ? object.responses.map((e) => exports.SimulateResponse.fromJSON(e))
                : [],
            error: isSet(object.error) ? globalThis.String(object.error) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.responses?.length) {
            obj.responses = message.responses.map((e) => exports.SimulateResponse.toJSON(e));
        }
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.MultiSimulateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMultiSimulateResponse();
        message.responses = object.responses?.map((e) => exports.SimulateResponse.fromPartial(e)) || [];
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseAlkaneInventoryRequest() {
    return { id: undefined };
}
exports.AlkaneInventoryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            exports.AlkaneId.encode(message.id, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkaneInventoryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = exports.AlkaneId.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? exports.AlkaneId.fromJSON(object.id) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = exports.AlkaneId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.AlkaneInventoryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkaneInventoryRequest();
        message.id = (object.id !== undefined && object.id !== null) ? exports.AlkaneId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseAlkaneIdToOutpointRequest() {
    return { id: undefined };
}
exports.AlkaneIdToOutpointRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            exports.AlkaneId.encode(message.id, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkaneIdToOutpointRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = exports.AlkaneId.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? exports.AlkaneId.fromJSON(object.id) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = exports.AlkaneId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.AlkaneIdToOutpointRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkaneIdToOutpointRequest();
        message.id = (object.id !== undefined && object.id !== null) ? exports.AlkaneId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseAlkaneInventoryResponse() {
    return { alkanes: [] };
}
exports.AlkaneInventoryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.alkanes) {
            exports.AlkaneTransfer.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkaneInventoryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.alkanes.push(exports.AlkaneTransfer.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alkanes: globalThis.Array.isArray(object?.alkanes)
                ? object.alkanes.map((e) => exports.AlkaneTransfer.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alkanes?.length) {
            obj.alkanes = message.alkanes.map((e) => exports.AlkaneTransfer.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AlkaneInventoryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkaneInventoryResponse();
        message.alkanes = object.alkanes?.map((e) => exports.AlkaneTransfer.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAlkaneStorageRequest() {
    return { id: undefined, path: new Uint8Array(0) };
}
exports.AlkaneStorageRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            exports.AlkaneId.encode(message.id, writer.uint32(10).fork()).join();
        }
        if (message.path.length !== 0) {
            writer.uint32(18).bytes(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkaneStorageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = exports.AlkaneId.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? exports.AlkaneId.fromJSON(object.id) : undefined,
            path: isSet(object.path) ? bytesFromBase64(object.path) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = exports.AlkaneId.toJSON(message.id);
        }
        if (message.path.length !== 0) {
            obj.path = base64FromBytes(message.path);
        }
        return obj;
    },
    create(base) {
        return exports.AlkaneStorageRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkaneStorageRequest();
        message.id = (object.id !== undefined && object.id !== null) ? exports.AlkaneId.fromPartial(object.id) : undefined;
        message.path = object.path ?? new Uint8Array(0);
        return message;
    },
};
function createBaseAlkaneStorageResponse() {
    return { value: new Uint8Array(0) };
}
exports.AlkaneStorageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value.length !== 0) {
            writer.uint32(10).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkaneStorageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.AlkaneStorageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkaneStorageResponse();
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
function createBaseAlkaneIdToOutpointResponse() {
    return { txid: new Uint8Array(0), vout: 0 };
}
exports.AlkaneIdToOutpointResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.txid.length !== 0) {
            writer.uint32(10).bytes(message.txid);
        }
        if (message.vout !== 0) {
            writer.uint32(16).uint32(message.vout);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlkaneIdToOutpointResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.txid = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.vout = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            txid: isSet(object.txid) ? bytesFromBase64(object.txid) : new Uint8Array(0),
            vout: isSet(object.vout) ? globalThis.Number(object.vout) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.txid.length !== 0) {
            obj.txid = base64FromBytes(message.txid);
        }
        if (message.vout !== 0) {
            obj.vout = Math.round(message.vout);
        }
        return obj;
    },
    create(base) {
        return exports.AlkaneIdToOutpointResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAlkaneIdToOutpointResponse();
        message.txid = object.txid ?? new Uint8Array(0);
        message.vout = object.vout ?? 0;
        return message;
    },
};
function createBaseOutpoint() {
    return { txid: new Uint8Array(0), vout: 0 };
}
exports.Outpoint = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.txid.length !== 0) {
            writer.uint32(10).bytes(message.txid);
        }
        if (message.vout !== 0) {
            writer.uint32(16).uint32(message.vout);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOutpoint();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.txid = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.vout = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            txid: isSet(object.txid) ? bytesFromBase64(object.txid) : new Uint8Array(0),
            vout: isSet(object.vout) ? globalThis.Number(object.vout) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.txid.length !== 0) {
            obj.txid = base64FromBytes(message.txid);
        }
        if (message.vout !== 0) {
            obj.vout = Math.round(message.vout);
        }
        return obj;
    },
    create(base) {
        return exports.Outpoint.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOutpoint();
        message.txid = object.txid ?? new Uint8Array(0);
        message.vout = object.vout ?? 0;
        return message;
    },
};
function createBaseTrace() {
    return { outpoint: undefined, trace: undefined };
}
exports.Trace = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.outpoint !== undefined) {
            exports.Outpoint.encode(message.outpoint, writer.uint32(10).fork()).join();
        }
        if (message.trace !== undefined) {
            exports.AlkanesTrace.encode(message.trace, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.outpoint = exports.Outpoint.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.trace = exports.AlkanesTrace.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outpoint: isSet(object.outpoint) ? exports.Outpoint.fromJSON(object.outpoint) : undefined,
            trace: isSet(object.trace) ? exports.AlkanesTrace.fromJSON(object.trace) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outpoint !== undefined) {
            obj.outpoint = exports.Outpoint.toJSON(message.outpoint);
        }
        if (message.trace !== undefined) {
            obj.trace = exports.AlkanesTrace.toJSON(message.trace);
        }
        return obj;
    },
    create(base) {
        return exports.Trace.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTrace();
        message.outpoint = (object.outpoint !== undefined && object.outpoint !== null)
            ? exports.Outpoint.fromPartial(object.outpoint)
            : undefined;
        message.trace = (object.trace !== undefined && object.trace !== null)
            ? exports.AlkanesTrace.fromPartial(object.trace)
            : undefined;
        return message;
    },
};
function createBaseTraceBlockRequest() {
    return { block: 0n };
}
exports.TraceBlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.block !== 0n) {
            if (BigInt.asUintN(64, message.block) !== message.block) {
                throw new globalThis.Error("value provided for field message.block of type uint64 too large");
            }
            writer.uint32(8).uint64(message.block);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTraceBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.block = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { block: isSet(object.block) ? BigInt(object.block) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.block !== 0n) {
            obj.block = message.block.toString();
        }
        return obj;
    },
    create(base) {
        return exports.TraceBlockRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTraceBlockRequest();
        message.block = object.block ?? 0n;
        return message;
    },
};
function createBaseTraceBlockResponse() {
    return { traces: [] };
}
exports.TraceBlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.traces) {
            exports.Trace.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTraceBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.traces.push(exports.Trace.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { traces: globalThis.Array.isArray(object?.traces) ? object.traces.map((e) => exports.Trace.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.traces?.length) {
            obj.traces = message.traces.map((e) => exports.Trace.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.TraceBlockResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTraceBlockResponse();
        message.traces = object.traces?.map((e) => exports.Trace.fromPartial(e)) || [];
        return message;
    },
};
function createBaseBytecodeRequest() {
    return { id: undefined };
}
exports.BytecodeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== undefined) {
            exports.AlkaneId.encode(message.id, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBytecodeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = exports.AlkaneId.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? exports.AlkaneId.fromJSON(object.id) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = exports.AlkaneId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.BytecodeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBytecodeRequest();
        message.id = (object.id !== undefined && object.id !== null) ? exports.AlkaneId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseBlockRequest() {
    return { height: 0 };
}
exports.BlockRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.height !== 0) {
            writer.uint32(8).uint32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.height = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { height: isSet(object.height) ? globalThis.Number(object.height) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        return obj;
    },
    create(base) {
        return exports.BlockRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockRequest();
        message.height = object.height ?? 0;
        return message;
    },
};
function createBaseBlockResponse() {
    return { block: new Uint8Array(0), height: 0 };
}
exports.BlockResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.block.length !== 0) {
            writer.uint32(10).bytes(message.block);
        }
        if (message.height !== 0) {
            writer.uint32(16).uint32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.block = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            block: isSet(object.block) ? bytesFromBase64(object.block) : new Uint8Array(0),
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.block.length !== 0) {
            obj.block = base64FromBytes(message.block);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        return obj;
    },
    create(base) {
        return exports.BlockResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockResponse();
        message.block = object.block ?? new Uint8Array(0);
        message.height = object.height ?? 0;
        return message;
    },
};
function createBasePendingUnwrapsRequest() {
    return { height: 0 };
}
exports.PendingUnwrapsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.height !== 0) {
            writer.uint32(8).uint32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePendingUnwrapsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.height = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { height: isSet(object.height) ? globalThis.Number(object.height) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        return obj;
    },
    create(base) {
        return exports.PendingUnwrapsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePendingUnwrapsRequest();
        message.height = object.height ?? 0;
        return message;
    },
};
function createBasePayment() {
    return { spendable: undefined, output: new Uint8Array(0), fulfilled: false };
}
exports.Payment = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.spendable !== undefined) {
            exports.Outpoint.encode(message.spendable, writer.uint32(10).fork()).join();
        }
        if (message.output.length !== 0) {
            writer.uint32(18).bytes(message.output);
        }
        if (message.fulfilled !== false) {
            writer.uint32(24).bool(message.fulfilled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePayment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.spendable = exports.Outpoint.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.output = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fulfilled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            spendable: isSet(object.spendable) ? exports.Outpoint.fromJSON(object.spendable) : undefined,
            output: isSet(object.output) ? bytesFromBase64(object.output) : new Uint8Array(0),
            fulfilled: isSet(object.fulfilled) ? globalThis.Boolean(object.fulfilled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.spendable !== undefined) {
            obj.spendable = exports.Outpoint.toJSON(message.spendable);
        }
        if (message.output.length !== 0) {
            obj.output = base64FromBytes(message.output);
        }
        if (message.fulfilled !== false) {
            obj.fulfilled = message.fulfilled;
        }
        return obj;
    },
    create(base) {
        return exports.Payment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePayment();
        message.spendable = (object.spendable !== undefined && object.spendable !== null)
            ? exports.Outpoint.fromPartial(object.spendable)
            : undefined;
        message.output = object.output ?? new Uint8Array(0);
        message.fulfilled = object.fulfilled ?? false;
        return message;
    },
};
function createBasePendingUnwrapsResponse() {
    return { payments: [] };
}
exports.PendingUnwrapsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.payments) {
            exports.Payment.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePendingUnwrapsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.payments.push(exports.Payment.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            payments: globalThis.Array.isArray(object?.payments) ? object.payments.map((e) => exports.Payment.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.payments?.length) {
            obj.payments = message.payments.map((e) => exports.Payment.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.PendingUnwrapsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePendingUnwrapsResponse();
        message.payments = object.payments?.map((e) => exports.Payment.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=alkanes.js.map