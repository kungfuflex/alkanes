/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: alkanes.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export declare namespace alkanes {
    enum AlkanesTraceCallType {
        NONE = 0,
        CALL = 1,
        DELEGATECALL = 2,
        STATICCALL = 3
    }
    enum AlkanesTraceStatusFlag {
        SUCCESS = 0,
        FAILURE = 1
    }
    class uint128 extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            lo?: string;
            hi?: string;
        });
        get lo(): string;
        set lo(value: string);
        get hi(): string;
        set hi(value: string);
        static fromObject(data: {
            lo?: string;
            hi?: string;
        }): uint128;
        toObject(): {
            lo?: string;
            hi?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): uint128;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): uint128;
    }
    class AlkaneId extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            block?: uint128;
            tx?: uint128;
        });
        get block(): uint128;
        set block(value: uint128);
        get has_block(): boolean;
        get tx(): uint128;
        set tx(value: uint128);
        get has_tx(): boolean;
        static fromObject(data: {
            block?: ReturnType<typeof uint128.prototype.toObject>;
            tx?: ReturnType<typeof uint128.prototype.toObject>;
        }): AlkaneId;
        toObject(): {
            block?: ReturnType<typeof uint128.prototype.toObject>;
            tx?: ReturnType<typeof uint128.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkaneId;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkaneId;
    }
    class AlkaneTransfer extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            id?: AlkaneId;
            value?: uint128;
        });
        get id(): AlkaneId;
        set id(value: AlkaneId);
        get has_id(): boolean;
        get value(): uint128;
        set value(value: uint128);
        get has_value(): boolean;
        static fromObject(data: {
            id?: ReturnType<typeof AlkaneId.prototype.toObject>;
            value?: ReturnType<typeof uint128.prototype.toObject>;
        }): AlkaneTransfer;
        toObject(): {
            id?: ReturnType<typeof AlkaneId.prototype.toObject>;
            value?: ReturnType<typeof uint128.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkaneTransfer;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkaneTransfer;
    }
    class MessageContextParcel extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            alkanes?: AlkaneTransfer[];
            transaction?: Uint8Array;
            block?: Uint8Array;
            height?: number;
            txindex?: number;
            calldata?: Uint8Array;
            vout?: number;
            pointer?: number;
            refund_pointer?: number;
        });
        get alkanes(): AlkaneTransfer[];
        set alkanes(value: AlkaneTransfer[]);
        get transaction(): Uint8Array;
        set transaction(value: Uint8Array);
        get block(): Uint8Array;
        set block(value: Uint8Array);
        get height(): number;
        set height(value: number);
        get txindex(): number;
        set txindex(value: number);
        get calldata(): Uint8Array;
        set calldata(value: Uint8Array);
        get vout(): number;
        set vout(value: number);
        get pointer(): number;
        set pointer(value: number);
        get refund_pointer(): number;
        set refund_pointer(value: number);
        static fromObject(data: {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
            transaction?: Uint8Array;
            block?: Uint8Array;
            height?: number;
            txindex?: number;
            calldata?: Uint8Array;
            vout?: number;
            pointer?: number;
            refund_pointer?: number;
        }): MessageContextParcel;
        toObject(): {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
            transaction?: Uint8Array;
            block?: Uint8Array;
            height?: number;
            txindex?: number;
            calldata?: Uint8Array;
            vout?: number;
            pointer?: number;
            refund_pointer?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageContextParcel;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MessageContextParcel;
    }
    class KeyValuePair extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            key?: Uint8Array;
            value?: Uint8Array;
        });
        get key(): Uint8Array;
        set key(value: Uint8Array);
        get value(): Uint8Array;
        set value(value: Uint8Array);
        static fromObject(data: {
            key?: Uint8Array;
            value?: Uint8Array;
        }): KeyValuePair;
        toObject(): {
            key?: Uint8Array;
            value?: Uint8Array;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyValuePair;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): KeyValuePair;
    }
    class ExtendedCallResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            alkanes?: AlkaneTransfer[];
            storage?: KeyValuePair[];
            data?: Uint8Array;
        });
        get alkanes(): AlkaneTransfer[];
        set alkanes(value: AlkaneTransfer[]);
        get storage(): KeyValuePair[];
        set storage(value: KeyValuePair[]);
        get data(): Uint8Array;
        set data(value: Uint8Array);
        static fromObject(data: {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
            storage?: ReturnType<typeof KeyValuePair.prototype.toObject>[];
            data?: Uint8Array;
        }): ExtendedCallResponse;
        toObject(): {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
            storage?: ReturnType<typeof KeyValuePair.prototype.toObject>[];
            data?: Uint8Array;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtendedCallResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ExtendedCallResponse;
    }
    class Context extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            myself?: AlkaneId;
            caller?: AlkaneId;
            inputs?: uint128[];
            vout?: number;
            incoming_alkanes?: AlkaneTransfer[];
        });
        get myself(): AlkaneId;
        set myself(value: AlkaneId);
        get has_myself(): boolean;
        get caller(): AlkaneId;
        set caller(value: AlkaneId);
        get has_caller(): boolean;
        get inputs(): uint128[];
        set inputs(value: uint128[]);
        get vout(): number;
        set vout(value: number);
        get incoming_alkanes(): AlkaneTransfer[];
        set incoming_alkanes(value: AlkaneTransfer[]);
        static fromObject(data: {
            myself?: ReturnType<typeof AlkaneId.prototype.toObject>;
            caller?: ReturnType<typeof AlkaneId.prototype.toObject>;
            inputs?: ReturnType<typeof uint128.prototype.toObject>[];
            vout?: number;
            incoming_alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
        }): Context;
        toObject(): {
            myself?: ReturnType<typeof AlkaneId.prototype.toObject>;
            caller?: ReturnType<typeof AlkaneId.prototype.toObject>;
            inputs?: ReturnType<typeof uint128.prototype.toObject>[];
            vout?: number;
            incoming_alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Context;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Context;
    }
    class TraceContext extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            inner?: Context;
            fuel?: number;
        });
        get inner(): Context;
        set inner(value: Context);
        get has_inner(): boolean;
        get fuel(): number;
        set fuel(value: number);
        static fromObject(data: {
            inner?: ReturnType<typeof Context.prototype.toObject>;
            fuel?: number;
        }): TraceContext;
        toObject(): {
            inner?: ReturnType<typeof Context.prototype.toObject>;
            fuel?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TraceContext;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): TraceContext;
    }
    class AlkanesEnterContext extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            call_type?: AlkanesTraceCallType;
            context?: TraceContext;
        });
        get call_type(): AlkanesTraceCallType;
        set call_type(value: AlkanesTraceCallType);
        get context(): TraceContext;
        set context(value: TraceContext);
        get has_context(): boolean;
        static fromObject(data: {
            call_type?: AlkanesTraceCallType;
            context?: ReturnType<typeof TraceContext.prototype.toObject>;
        }): AlkanesEnterContext;
        toObject(): {
            call_type?: AlkanesTraceCallType;
            context?: ReturnType<typeof TraceContext.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesEnterContext;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkanesEnterContext;
    }
    class AlkanesExitContext extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            status?: AlkanesTraceStatusFlag;
            response?: ExtendedCallResponse;
        });
        get status(): AlkanesTraceStatusFlag;
        set status(value: AlkanesTraceStatusFlag);
        get response(): ExtendedCallResponse;
        set response(value: ExtendedCallResponse);
        get has_response(): boolean;
        static fromObject(data: {
            status?: AlkanesTraceStatusFlag;
            response?: ReturnType<typeof ExtendedCallResponse.prototype.toObject>;
        }): AlkanesExitContext;
        toObject(): {
            status?: AlkanesTraceStatusFlag;
            response?: ReturnType<typeof ExtendedCallResponse.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesExitContext;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkanesExitContext;
    }
    class AlkanesCreate extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            new_alkane?: AlkaneId;
        });
        get new_alkane(): AlkaneId;
        set new_alkane(value: AlkaneId);
        get has_new_alkane(): boolean;
        static fromObject(data: {
            new_alkane?: ReturnType<typeof AlkaneId.prototype.toObject>;
        }): AlkanesCreate;
        toObject(): {
            new_alkane?: ReturnType<typeof AlkaneId.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesCreate;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkanesCreate;
    }
    class AlkanesTraceEvent extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            enter_context?: AlkanesEnterContext;
            exit_context?: never;
            create_alkane?: never;
        } | {
            enter_context?: never;
            exit_context?: AlkanesExitContext;
            create_alkane?: never;
        } | {
            enter_context?: never;
            exit_context?: never;
            create_alkane?: AlkanesCreate;
        }))));
        get enter_context(): AlkanesEnterContext;
        set enter_context(value: AlkanesEnterContext);
        get has_enter_context(): boolean;
        get exit_context(): AlkanesExitContext;
        set exit_context(value: AlkanesExitContext);
        get has_exit_context(): boolean;
        get create_alkane(): AlkanesCreate;
        set create_alkane(value: AlkanesCreate);
        get has_create_alkane(): boolean;
        get event(): "none" | "enter_context" | "exit_context" | "create_alkane";
        static fromObject(data: {
            enter_context?: ReturnType<typeof AlkanesEnterContext.prototype.toObject>;
            exit_context?: ReturnType<typeof AlkanesExitContext.prototype.toObject>;
            create_alkane?: ReturnType<typeof AlkanesCreate.prototype.toObject>;
        }): AlkanesTraceEvent;
        toObject(): {
            enter_context?: ReturnType<typeof AlkanesEnterContext.prototype.toObject>;
            exit_context?: ReturnType<typeof AlkanesExitContext.prototype.toObject>;
            create_alkane?: ReturnType<typeof AlkanesCreate.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesTraceEvent;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkanesTraceEvent;
    }
    class AlkanesBlockEvent extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            traces?: AlkanesTrace;
            outpoint?: Outpoint;
            txindex?: number;
        });
        get traces(): AlkanesTrace;
        set traces(value: AlkanesTrace);
        get has_traces(): boolean;
        get outpoint(): Outpoint;
        set outpoint(value: Outpoint);
        get has_outpoint(): boolean;
        get txindex(): number;
        set txindex(value: number);
        static fromObject(data: {
            traces?: ReturnType<typeof AlkanesTrace.prototype.toObject>;
            outpoint?: ReturnType<typeof Outpoint.prototype.toObject>;
            txindex?: number;
        }): AlkanesBlockEvent;
        toObject(): {
            traces?: ReturnType<typeof AlkanesTrace.prototype.toObject>;
            outpoint?: ReturnType<typeof Outpoint.prototype.toObject>;
            txindex?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesBlockEvent;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkanesBlockEvent;
    }
    class AlkanesBlockTraceEvent extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            events?: AlkanesBlockEvent[];
        });
        get events(): AlkanesBlockEvent[];
        set events(value: AlkanesBlockEvent[]);
        static fromObject(data: {
            events?: ReturnType<typeof AlkanesBlockEvent.prototype.toObject>[];
        }): AlkanesBlockTraceEvent;
        toObject(): {
            events?: ReturnType<typeof AlkanesBlockEvent.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesBlockTraceEvent;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkanesBlockTraceEvent;
    }
    class AlkanesTrace extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            events?: AlkanesTraceEvent[];
        });
        get events(): AlkanesTraceEvent[];
        set events(value: AlkanesTraceEvent[]);
        static fromObject(data: {
            events?: ReturnType<typeof AlkanesTraceEvent.prototype.toObject>[];
        }): AlkanesTrace;
        toObject(): {
            events?: ReturnType<typeof AlkanesTraceEvent.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkanesTrace;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkanesTrace;
    }
    class SimulateResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            execution?: ExtendedCallResponse;
            gas_used?: number;
            error?: string;
        });
        get execution(): ExtendedCallResponse;
        set execution(value: ExtendedCallResponse);
        get has_execution(): boolean;
        get gas_used(): number;
        set gas_used(value: number);
        get error(): string;
        set error(value: string);
        static fromObject(data: {
            execution?: ReturnType<typeof ExtendedCallResponse.prototype.toObject>;
            gas_used?: number;
            error?: string;
        }): SimulateResponse;
        toObject(): {
            execution?: ReturnType<typeof ExtendedCallResponse.prototype.toObject>;
            gas_used?: number;
            error?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimulateResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): SimulateResponse;
    }
    class AlkaneInventoryRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            id?: AlkaneId;
        });
        get id(): AlkaneId;
        set id(value: AlkaneId);
        get has_id(): boolean;
        static fromObject(data: {
            id?: ReturnType<typeof AlkaneId.prototype.toObject>;
        }): AlkaneInventoryRequest;
        toObject(): {
            id?: ReturnType<typeof AlkaneId.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkaneInventoryRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkaneInventoryRequest;
    }
    class AlkaneInventoryResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            alkanes?: AlkaneTransfer[];
        });
        get alkanes(): AlkaneTransfer[];
        set alkanes(value: AlkaneTransfer[]);
        static fromObject(data: {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
        }): AlkaneInventoryResponse;
        toObject(): {
            alkanes?: ReturnType<typeof AlkaneTransfer.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlkaneInventoryResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AlkaneInventoryResponse;
    }
    class Outpoint extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            txid?: Uint8Array;
            vout?: number;
        });
        get txid(): Uint8Array;
        set txid(value: Uint8Array);
        get vout(): number;
        set vout(value: number);
        static fromObject(data: {
            txid?: Uint8Array;
            vout?: number;
        }): Outpoint;
        toObject(): {
            txid?: Uint8Array;
            vout?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Outpoint;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Outpoint;
    }
    class Trace extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            outpoint?: Outpoint;
            trace?: AlkanesTrace;
        });
        get outpoint(): Outpoint;
        set outpoint(value: Outpoint);
        get has_outpoint(): boolean;
        get trace(): AlkanesTrace;
        set trace(value: AlkanesTrace);
        get has_trace(): boolean;
        static fromObject(data: {
            outpoint?: ReturnType<typeof Outpoint.prototype.toObject>;
            trace?: ReturnType<typeof AlkanesTrace.prototype.toObject>;
        }): Trace;
        toObject(): {
            outpoint?: ReturnType<typeof Outpoint.prototype.toObject>;
            trace?: ReturnType<typeof AlkanesTrace.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Trace;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Trace;
    }
    class TraceBlockRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            block?: number;
        });
        get block(): number;
        set block(value: number);
        static fromObject(data: {
            block?: number;
        }): TraceBlockRequest;
        toObject(): {
            block?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TraceBlockRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): TraceBlockRequest;
    }
    class TraceBlockResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            traces?: Trace[];
        });
        get traces(): Trace[];
        set traces(value: Trace[]);
        static fromObject(data: {
            traces?: ReturnType<typeof Trace.prototype.toObject>[];
        }): TraceBlockResponse;
        toObject(): {
            traces?: ReturnType<typeof Trace.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TraceBlockResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): TraceBlockResponse;
    }
}
